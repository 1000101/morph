// Code generated by go-bindata.
// sources:
// data/eval-machines.nix
// data/options.nix
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataEvalMachinesNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4b\x6f\xdb\x38\x10\xbe\xeb\x57\x0c\xd4\x00\xb6\x90\x46\xe9\xee\x6d\x6d\xf8\xd0\x2d\xf6\x05\xf4\x11\xb4\x45\x2f\x41\xb0\xa0\xa5\x91\x45\x98\x22\x55\x92\x52\xe2\x35\xfc\xdf\x17\xc3\x87\x28\xbb\x39\x34\x3e\x24\xd2\x88\x1c\xce\x7c\xf3\xf1\x9b\x79\x05\xef\x54\xd7\x0b\xb4\x28\x0e\x60\xac\xe6\x7d\x8f\x35\xd4\xea\x51\xc2\x88\xda\x70\x25\x41\x35\x20\xf9\x93\xea\xcd\x02\x70\x64\x62\x60\x56\xe9\xec\x08\x12\xed\xa3\xd2\xfb\x3f\x9e\x7a\x0d\xa7\x55\x96\x09\xb4\x19\x44\x2b\x6c\x80\x77\xbd\xd2\x76\xbe\x6c\x9d\x01\xf4\xfb\x9d\x01\x00\xd8\xc4\x0f\x65\xfc\x4f\x5f\x68\x85\xe0\x5b\xf0\x2b\xc8\x52\x0a\xbe\x5d\x67\x5c\x66\x00\x8f\xdc\xb6\x10\x57\xb9\x17\xf7\x2d\xd3\x58\xc1\x31\x03\xf0\xa9\x0c\x16\xc1\xb6\x08\x35\x36\x5c\x72\xcb\x95\x34\x94\x01\x99\x3a\x56\xb5\x5c\xa2\x29\x29\x4e\x55\xa3\x81\x4d\x46\x27\x09\x6e\xec\x57\xf5\xd6\x5a\x6d\x60\xd9\xb1\x9e\xfe\xb8\x95\x1f\x59\x87\x2b\xb7\x04\xc0\xa7\xe7\x7f\xaf\xe0\x2f\xb4\xce\x65\xa5\x64\xc3\x77\x83\x66\x36\x20\x65\x5b\x6e\xe2\x41\xd0\x68\xd5\x01\xb2\xaa\x8d\xc9\xce\x3c\xe0\x53\xaf\xd1\x10\xc0\xaf\x81\x59\xeb\x76\xec\xe0\xdf\x86\x0b\xa4\x77\xcd\xb7\x83\x45\x03\x46\xb9\x73\x3e\xf2\xa7\x4f\x5f\xa0\x53\xf5\x20\x70\xe6\xc4\x1c\x8c\xc5\x0e\x2a\x26\x61\xc7\x47\x04\x83\xd2\xf0\xad\x40\x40\xad\x95\x86\x0e\x8d\x61\x3b\x9f\xb0\xff\x79\x0f\x06\x36\x70\x0f\xc7\x50\x22\xff\x16\xcb\x70\x75\x9c\x25\x7f\x82\x87\x35\x9c\x68\xa5\x6c\x51\x73\x0b\xcb\xb0\xac\xf0\x91\xd2\xc7\x87\x75\xf0\xee\x8a\x44\xbf\x23\x48\xd6\x21\x6c\x60\xe6\x69\x3d\x85\x40\x14\xc2\xc4\x8f\xfc\xea\x68\xd5\x17\xab\x29\x7b\x57\xf0\x9e\xd9\xf6\x74\x4b\x8c\x33\xb7\x82\x6f\x6f\x89\x73\x37\x1e\xe7\x52\xf2\xa7\xdc\xd5\x3a\xfe\x62\x5c\x91\x16\x3f\xe4\x39\xb3\x25\xeb\xf5\xf5\x99\x99\xa0\xd8\xe3\x01\x36\x90\xd7\xd8\x0b\x75\xb8\x31\x76\x68\x9a\x7c\x7d\xb6\xca\x1d\x37\x03\xac\xbc\x55\xbd\xa3\x17\x45\x95\x50\x48\xbf\x57\x70\xa7\xd5\xc8\x6b\x04\x46\x6c\x64\x83\xb0\xd0\x2a\x63\x1d\x38\x4c\xd6\xe0\x0f\xeb\x50\x5a\xb0\x4c\xef\xd0\x02\x7e\x1f\x98\x78\xc6\x91\xf5\x2c\x98\x78\xe1\x01\x3e\xa7\x35\x70\xe9\x5f\x55\x8d\xa2\xfc\xc1\x49\x28\x1c\x97\xbb\x92\x82\xf8\x18\x2a\xb4\xff\x34\xa2\xd6\x14\xe4\x6f\x6f\xde\x3c\x5f\xb0\xf8\x4b\xe1\x96\x3e\xdc\xbf\x95\xb1\x2f\xf2\x71\x3a\x7b\x3f\x83\x0c\x9f\xac\x66\x6f\xf5\x8e\xb0\x4d\x74\xf3\xb7\x74\xfd\x1c\x9f\xe0\x94\xb6\x4f\x8f\xfe\x80\x02\x96\x84\x14\x2d\x33\xb0\xd4\xd8\xa9\x11\xfd\xed\x8e\xea\x74\x0f\x79\x78\xcc\xa9\xe6\xae\x36\x26\x87\x5c\xa3\x51\x83\xae\xd0\x3f\x7f\x1f\xb8\xc6\x1c\x72\x47\xf5\x1c\x1e\x8a\xa2\x58\x67\x59\x36\x47\xe2\x1f\xd9\xa8\x0f\x8e\x55\x14\x77\x76\x0e\xd3\x64\x82\x98\x40\xfa\x36\x87\x87\xe9\xdd\x40\x36\xca\x9d\xe9\x44\xe4\x88\xc2\x30\xf0\xda\xdb\x5c\xa2\xa7\x75\xe6\xd4\xee\xae\x65\x06\xe1\x97\x55\x54\x65\x04\x25\xc5\x21\x88\xdf\x14\x43\xd2\x12\xe2\x04\x97\x8d\x8a\xaa\x37\x09\x5a\x80\x62\x91\x44\x39\x46\xe0\xf0\x77\x76\x7a\xf0\x56\x2e\xc1\x2b\xae\x7b\x8b\x9a\x3a\xdd\xb4\x46\xf0\x1e\x3a\xd6\x07\xc0\x5d\x01\x97\x72\x05\xe3\x62\x45\x47\xc2\x08\x1b\x30\x95\x1e\xb6\x9f\xdc\xed\xf9\xe6\xd4\x60\x5c\xac\x93\x7c\xc0\x5c\x6f\xc6\x32\x5c\xfd\x94\x52\x01\x33\xfa\x19\xac\x34\x5a\x03\x2d\x32\x61\xdb\x77\x2d\x56\x7b\x03\x23\xd5\x73\xce\xae\x00\xbf\x3c\xb3\x91\xc2\x7c\x46\x81\x84\xe2\x06\xa6\x83\xbc\xa6\x96\x67\x9f\x95\x8e\x3c\xfa\x32\x34\x0d\x7f\x7a\x7e\xf5\x37\xdf\x30\x7f\x62\x49\x31\xe3\x6e\x78\x2a\xd6\x67\x80\xbe\xe7\xee\x6e\xf9\x76\xb4\xc7\xc3\x0a\x76\x68\x09\x53\xa7\x54\x11\xf5\x33\xa6\x4f\xc6\xe0\x3d\xb5\xe2\x58\xe0\xd8\x6b\x29\x9f\xe3\x33\x5c\xfa\x75\x05\xdb\x81\x8b\x1a\xaa\x30\x13\x4c\xda\x72\xd6\xe7\x1c\x93\x52\xe1\x83\xde\x1b\x9a\x02\x02\xb1\x12\x71\x1a\x2e\x2c\xea\xd0\x5b\x89\x06\x2b\x40\x81\x1d\x48\xbf\xa7\x08\xcc\x8a\xd5\xd7\x83\x7c\xa7\xba\x8e\xd4\x31\xef\x94\xee\xdb\x7c\xea\x29\xbd\xc6\x06\xf5\x7b\x55\x31\xf1\xbb\x0b\x72\x03\x56\x0f\x24\x04\x61\xc9\x62\x91\xda\xdc\xbe\xe6\x1a\x6e\x7a\xb8\x52\x43\x6a\xdb\xb3\x4e\xe3\x60\x73\xdc\xf3\x2d\xff\x2c\xc0\x99\x23\x00\x21\xe1\xc6\xc0\xd5\xf1\xb2\x9c\x0e\xa8\xd2\xaa\x5e\xe0\x88\xe2\xe4\x4e\xba\xbd\x3a\xca\xd3\x8b\xf7\x96\xb5\x1e\xef\xa8\xe9\x25\x1f\x64\x9a\xfc\x2c\x16\x01\xa5\x45\x51\xa4\x5c\x43\xe1\xfe\x1c\x64\xe5\x66\x0f\x89\x58\x63\x4d\x9d\xa2\x62\xa2\x1a\x04\x0b\x73\x90\x1f\xdd\x92\xc6\x94\xf0\x95\x46\x14\xd3\xaa\x41\xd4\xe0\xd8\x80\x23\x4a\x78\x6c\x51\xa6\x55\xce\x37\xd3\x08\x52\xd1\x1d\xb3\x70\x40\xfb\x9a\x86\x91\x47\x84\x86\xed\x71\xa6\x59\x56\xc1\x16\x81\xd1\xd4\x61\x55\xd2\x22\x3a\x3b\x48\xe8\xac\x6f\xa9\xc6\x79\x9e\x05\x16\x29\x99\xe6\x21\x53\x3a\x8d\x1d\xba\xee\x10\x1a\x42\xe3\x79\x69\xb9\xa4\x79\xf0\x72\x58\x63\x2b\x1a\x04\x4b\xe2\x93\xab\xe8\x1d\xe3\x1a\x18\x34\x4c\x18\x2c\x60\x39\xed\x9c\xf5\x84\xc9\xd6\x04\xf8\xdc\x41\x8d\x17\x78\xa0\xab\x46\x03\x57\x6f\x68\x6a\xa5\x00\x84\x3f\x62\x90\xfc\xfb\x80\xb0\xa4\xe7\x46\x30\x6b\x51\xfa\x18\x76\x68\x3f\xfb\x5c\x0d\x88\xe4\x64\xb2\x51\x0a\x97\xa2\xeb\xd2\x77\xd3\xf3\x34\x0b\x35\x51\x16\xf4\xb4\x71\x62\x01\x6f\x12\x06\xdc\xa4\xb2\x27\x37\xb6\x45\x39\x23\xdf\x72\x39\xfb\xb6\x4c\x70\x26\x6b\x51\x94\xb1\x42\x4a\xc3\xfd\x43\x31\xed\x46\x61\x70\xee\x2a\xed\xb9\xd8\x11\x5b\x42\x58\x7c\x0f\x0d\x3c\xc0\xf5\x35\x5c\x82\x12\x13\x72\xc8\x50\x3b\xfd\xaa\xa6\xda\xfe\x3c\x30\xd3\x39\x2f\x04\x23\xd2\xe4\x48\xd3\x26\x3b\xe5\xb0\x49\xdb\x27\x49\x68\x68\x98\x7d\x11\x5f\xe6\x48\x66\x09\x38\xb8\x7f\x38\x67\x51\xcc\xd4\x78\x16\xfd\xc7\xa3\xdc\x5c\x72\xaa\x52\xb2\x62\xf6\x03\xeb\xe7\x10\x2d\x2f\xd8\xd8\x18\x47\xd3\x53\xf6\x7f\x00\x00\x00\xff\xff\xfa\xb3\xcc\x11\xbb\x0d\x00\x00")

func dataEvalMachinesNixBytes() ([]byte, error) {
	return bindataRead(
		_dataEvalMachinesNix,
		"data/eval-machines.nix",
	)
}

func dataEvalMachinesNix() (*asset, error) {
	bytes, err := dataEvalMachinesNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/eval-machines.nix", size: 3515, mode: os.FileMode(420), modTime: time.Unix(1523270997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOptionsNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\x50\x1f\xd2\x02\x9d\xea\x38\x19\x36\xcc\xc8\xc3\xd0\x01\x4b\x81\xa0\x09\x1a\x6f\x2f\x45\x1f\x68\xea\x6c\x11\xa6\x78\x1c\xef\x14\xc7\x30\xf2\xbf\x0f\x94\x15\x5b\x52\x64\xe7\x47\xfd\x22\x99\xd4\x7d\x77\xf7\xf1\xf8\xdd\x6d\x40\x93\x9b\x9b\xc5\x47\xb0\x66\xf6\x11\xfc\x72\xc1\x1f\x21\xcb\x32\x78\xf8\x23\x49\x56\x46\x8a\xb8\x3e\xd9\xbd\x65\xb2\xf6\xc8\x93\x24\xb1\x28\x49\x42\x2b\x87\xe1\xda\x8b\x21\xc7\xd3\xb5\x47\xb8\x00\xae\x66\x25\xe5\x95\x45\x78\xbf\x69\x70\x60\x93\x00\x00\xd0\xf6\x3b\xb8\x68\xfe\xc7\xdf\x22\x50\xe5\xe1\x02\xca\xe5\x16\xa5\xb5\x15\x7f\xd2\x60\x4a\x98\x74\xd6\x73\x64\x1d\xcc\xd6\xe2\x02\xd2\xbf\x6b\x14\x29\x94\xc0\xca\x58\x0b\xb4\x72\x20\x05\x02\xa3\x0e\x28\x59\xda\x37\x9e\xab\xca\x4a\x34\x0c\x44\xd2\xda\x7d\x98\x24\xbb\xf7\x8a\x31\xfc\x74\x60\xff\x44\x90\x55\x41\x3f\x1d\x56\xf3\x78\xf8\x30\x49\x92\x25\xae\x5f\x46\x79\x9f\xf0\x1c\x59\x8c\x53\x4d\x70\x4f\x32\x7b\x9a\x53\x2f\x9b\x6f\x58\x92\x20\x78\x25\x45\xba\x0b\xa9\x7e\x32\x55\x41\xe3\x9b\x40\xaf\x48\x2b\x3b\x84\x59\xd7\xd6\x10\xe4\x9e\xa8\xcd\xc3\xa4\xeb\xa6\x5f\x8f\xc3\x3e\x4f\x4e\x76\xd4\x5e\xd7\x4e\x68\xde\x3e\x97\x66\xf3\xe4\xa4\x1b\x8f\xc7\x50\x1a\xe6\x86\xd1\x23\x51\xa5\xa3\xf3\xd1\x28\x9d\xbc\x94\x80\x9b\x16\x2e\xde\xfb\x80\xcc\x98\x83\x62\x20\x2d\xca\x66\x7b\x56\xf6\x15\x70\x17\x3d\xbd\xa4\x06\x7a\x45\x50\x23\x89\xd8\x97\x1e\xd4\x2e\xa3\xf3\xb3\xf1\x68\x54\xa6\x13\x78\x07\x67\x23\xc8\xd5\x9a\x87\x73\x99\x4e\xaf\x60\x4e\xa1\x61\x12\x84\x96\xe8\xb8\x5e\x91\xc2\x30\x14\xc4\x92\xf5\x8e\x59\x9b\x3c\x0c\x12\xda\x04\x64\x0d\xcb\xf5\x7c\x38\xae\xef\x3f\x1e\xd7\xf0\x5e\x95\xde\xc6\xef\xbf\xa7\xa7\xbf\x8d\xb3\xf1\x28\x3b\x3d\xcd\x4e\xc7\x9f\xce\xc6\xe9\x8f\x03\xc4\x7f\xb9\xb9\x3b\x87\xcf\x5f\xfe\xfa\x06\x33\x4b\x7a\xb9\xd5\x0f\xad\x1c\x58\x5a\x18\x07\x15\x1b\xb7\x78\x4d\x26\x9e\xac\xd1\x06\xdf\x9c\x4c\xda\xbc\xa7\x83\x59\x2d\x7f\xe7\x14\x52\x4d\x4e\x02\xd9\x5f\xbc\x55\x0e\x0f\x66\xf6\x6f\x0d\xa9\xb4\x46\xe6\x7d\x58\x42\xa0\xbc\xb7\xeb\x63\x59\xd4\x65\xb6\x2d\xb2\x02\x95\x95\xe2\x73\x81\x7a\xf9\x7a\x9d\x69\x45\x33\xa0\xa0\x43\xea\xd9\x4b\xe1\xb2\xf6\x0e\x3a\xba\x6f\xef\xb5\xaf\x03\xd4\x09\x1c\xa1\xdb\x55\xd6\x5e\x87\x23\x77\xef\x32\xda\x3b\x55\x62\xfa\xf4\x3c\xa2\xf1\xe3\xea\xbb\xfd\xf2\xb6\x5b\x66\x0e\x65\x45\x61\x69\xdc\x22\x8b\x41\x7c\x55\x25\x76\x22\x63\x5d\x60\xf9\x36\x45\xbc\xad\x4d\x07\x22\x4a\x0b\x11\xdf\x25\xc0\x53\x38\x46\x80\x71\x72\x48\x75\xa2\xa1\xab\xca\x19\x86\x1e\xa2\x92\xe2\x08\x62\xdc\x3e\x44\xe6\x74\x7a\x03\x01\xff\xab\x90\xa5\x2d\xe8\x9d\x14\x3e\xf5\x0e\x10\x55\x8e\x47\xef\xbf\x12\x09\xdc\xbf\x33\x1d\xbf\x8e\x04\x4c\xbc\x27\x25\x3a\xc1\x7c\xc0\xeb\xe6\xa1\x9b\x22\x06\x43\xf9\x9b\x68\xbb\x45\x4d\x2e\x67\x98\xa1\xac\x10\xdd\xb6\x3e\x79\xc0\xe5\xb8\xe3\x51\x4c\x89\x54\xbd\xed\xa4\xa6\x8d\xad\x71\x51\x8c\xa2\xf7\x01\x77\xbf\x76\xdc\x19\xc7\xa8\xab\x80\xb7\xb7\x57\x47\x5c\xce\x88\xec\x21\x69\x5c\x38\x0a\x08\xd1\x1e\x43\xa0\x30\xe4\x72\xae\x2c\xe3\x40\x73\x32\x2e\x69\x89\x42\x96\xa3\xb7\xb4\x8e\x47\xb3\xd3\x87\x2d\x25\x2a\x2c\x50\x2e\x8f\x5f\xe0\xdd\xa1\xef\x06\x8d\x5a\x8e\x9f\x69\xc0\xfb\xb1\x60\x2f\xa0\x1b\xf0\x8a\x79\x45\x21\xcf\x04\xef\xeb\x52\x9c\x13\xcd\x54\x48\x27\xd0\x9f\x22\x1e\x4b\xae\x3b\x68\x3d\x3b\x4b\xfc\x19\xcd\x50\x60\x55\x60\x40\x40\xa5\x8b\x1a\xc9\xcc\x2a\xc1\xc6\x6a\x86\x0c\x2a\xe2\x46\x31\x9e\x21\x68\xf2\x06\x73\xb8\x33\x0a\x98\x8b\x1d\x92\x71\x2c\xa8\xf2\xed\x5c\x12\xa8\x5a\x14\xf5\x7c\xf2\xd5\xdc\x83\xb6\xc4\x55\x40\x78\xbf\x44\xf4\xb1\x41\x19\x81\x58\x1d\xcd\x08\x13\x3f\x61\xa1\x80\xd9\x87\x03\x63\x4c\x4b\xd6\x5f\xd0\xa9\x7a\x4d\xe0\x58\x0b\x3e\xc8\xcb\x95\xe1\x3a\xbe\xa2\x25\xe9\x3c\x30\x65\xed\x4a\xe3\xae\xc1\x7e\xcd\xe4\xd7\x1f\x89\x9e\x8d\xea\x52\x71\x61\x34\x05\x0f\xdb\x6e\xf9\xd8\xc4\x62\x73\xdc\x6a\x7c\x15\x22\xbf\xca\xfb\x40\x16\xdb\x13\x40\x14\xfc\xe1\x04\xe2\x1d\x48\xfe\x0f\x00\x00\xff\xff\x88\x4b\x93\x78\x52\x0d\x00\x00")

func dataOptionsNixBytes() ([]byte, error) {
	return bindataRead(
		_dataOptionsNix,
		"data/options.nix",
	)
}

func dataOptionsNix() (*asset, error) {
	bytes, err := dataOptionsNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/options.nix", size: 3410, mode: os.FileMode(420), modTime: time.Unix(1523271274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/eval-machines.nix": dataEvalMachinesNix,
	"data/options.nix": dataOptionsNix,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"eval-machines.nix": &bintree{dataEvalMachinesNix, map[string]*bintree{}},
		"options.nix": &bintree{dataOptionsNix, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

