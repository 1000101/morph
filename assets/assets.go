// Code generated by go-bindata.
// sources:
// data/eval-machines.nix
// data/options.nix
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataEvalMachinesNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x3c\xb8\x01\x6c\x23\x8d\xd2\xdd\xdb\xda\xf0\xa1\x5b\xec\x17\xd0\x8f\xa0\x2d\x7a\x09\x82\x05\x6d\x8d\x6c\x22\x14\xa9\x92\x94\x13\xaf\xe1\xff\xbe\x18\x52\x14\xe5\x34\x87\xc6\x87\x44\x1a\x91\xc3\x99\x37\x8f\x6f\xe6\x15\xde\x99\xa6\x55\xe4\x49\x1d\xe0\xbc\x95\x6d\x4b\x15\x2a\xf3\xa0\xb1\x27\xeb\xa4\xd1\x30\x35\xb4\x7c\x34\xad\x9b\x82\xf6\x42\x75\xc2\x1b\x5b\x1c\xa1\xc9\x3f\x18\x7b\xff\xc7\x63\x6b\x71\x5a\x14\x85\x22\x5f\x20\x59\xb1\x82\x6c\x5a\x63\xfd\x78\xd9\xb2\x00\xda\xfb\xad\x03\x80\x55\xfa\x50\xa6\xff\xfc\x85\x57\x28\xb9\x46\x5c\xc1\x96\x52\xc9\xf5\xb2\x90\xba\x00\x1e\xa4\xdf\x21\xad\x0a\x2f\xe1\x5b\x61\x69\x83\x63\x01\xc4\x54\x3a\x4f\xf0\x3b\x42\x45\xb5\xd4\xd2\x4b\xa3\x1d\x67\xc0\xa6\x46\x6c\x76\x52\x93\x2b\x39\x4e\x53\x91\xc3\xaa\xe0\x93\x94\x74\xfe\xab\x79\xeb\xbd\x75\x98\x35\xa2\xe5\x3f\x61\xe5\x47\xd1\xd0\x22\x2c\x01\x62\x7a\xf1\xf7\x0a\x7f\x91\x0f\x2e\x37\x46\xd7\x72\xdb\x59\xe1\x7b\xa4\xfc\x4e\xba\x74\x10\x6a\x6b\x1a\x90\xd8\xec\x52\xb2\x23\x0f\xf4\xd8\x5a\x72\x0c\xf0\x6b\x08\xef\xc3\x8e\x2d\xfe\xad\xa5\x22\x7e\xb7\x72\xdd\x79\x72\x70\x26\x9c\xf3\x51\x3e\x7e\xfa\x82\xc6\x54\x9d\xa2\x91\x13\x77\x70\x9e\x1a\x6c\x84\xc6\x56\xee\x09\x8e\xb4\x93\x6b\x45\x20\x6b\x8d\x45\x43\xce\x89\x6d\x4c\x38\xfe\xa2\x07\x87\x15\x6e\x71\xec\x4b\x14\xdf\x52\x19\x2e\x8e\xa3\xe4\x4f\xb8\x5b\xe2\xc4\x2b\xf5\x8e\xac\xf4\x98\xf5\xcb\xe6\x31\x52\xfe\x78\xb7\xec\xbd\x87\x22\xf1\xef\x08\x2d\x1a\xc2\x0a\x23\x4f\xcb\x21\x04\xa6\x10\x65\x7e\x4c\x2e\x8e\xde\x7c\xf1\x96\xb3\x0f\x05\x6f\x85\xdf\x9d\xae\x99\x71\xee\x5a\xc9\xf5\x35\x73\xee\x2a\xe2\x5c\x6a\xf9\x38\x09\xb5\x4e\xbf\x14\x57\xa2\xc5\x0f\x79\x8e\x6c\xd9\x7a\x79\x79\x66\x66\x28\xee\xe9\x80\x15\x26\x15\xb5\xca\x1c\xae\x9c\xef\xea\x7a\xb2\x3c\x5b\x15\x8e\x1b\x01\x56\x5e\x9b\x36\xd0\x8b\xa3\xca\x28\xe4\xdf\x2b\xdc\x58\xb3\x97\x15\x41\x30\x1b\x45\xa7\x3c\x76\xc6\xf9\x00\x8e\xd0\x15\xe2\x61\x0d\x69\x0f\x2f\xec\x96\x3c\xe8\x7b\x27\xd4\x33\x8e\x7c\x64\xc1\xc0\x8b\x08\xf0\x39\xad\x21\x75\x7c\x35\x15\xa9\xf2\x07\x27\x7d\xe1\xa4\xde\x96\x1c\xc4\xc7\xbe\x42\xf7\x9f\xf6\x64\x2d\x07\xf9\xdb\x9b\x37\xcf\x17\x2c\xfd\x72\xb8\x65\x0c\xf7\x6f\xe3\xfc\x8b\x7c\x9c\xce\xde\xcf\x20\xa3\x47\x6f\xc5\x5b\xbb\x65\x6c\x33\xdd\xe2\x2d\x5d\x3e\xc7\x27\x9c\xf2\xf6\xe1\x31\x1e\x30\xc7\x8c\x91\xe2\x65\x0e\x33\x4b\x8d\xd9\x53\xbc\xdd\x49\x9d\x6e\x31\xe9\x1f\x27\x5c\xf3\x50\x1b\x37\xc1\xc4\x92\x33\x9d\xdd\x50\x7c\xfe\xde\x49\x4b\x13\x4c\x02\xd5\x27\xb8\x9b\xcf\xe7\xcb\xa2\x28\xc6\x48\xfc\xa3\x6b\xf3\x21\xb0\x8a\xe3\x2e\xce\x61\x1a\x4c\x48\x09\xe4\x6f\x63\x78\x84\xdd\x76\x6c\xe3\xdc\x85\xcd\x44\x4e\x28\x74\x9d\xac\xa2\x2d\x24\x7a\x5a\x16\x41\xed\x6e\x76\xc2\x11\x7e\x59\x24\x55\x26\x18\xad\x0e\xbd\xf8\x0d\x31\x64\x2d\x61\x4e\x48\x5d\x9b\xa4\x7a\x83\xa0\xf5\x50\x4c\xb3\x28\xa7\x08\x02\xfe\xc1\xce\x0f\xd1\x2a\x35\xa2\xe2\x86\xb7\xa4\xa9\xc3\x4d\xab\x95\x6c\xd1\x88\xb6\x07\x3c\x14\x70\xa6\x17\xd8\x4f\x17\x7c\x24\xf6\x58\xc1\x6d\x6c\xb7\xfe\x14\x6e\xcf\xb7\xa0\x06\xfb\xe9\x32\xcb\x07\xc6\x7a\xb3\x2f\xfb\xab\x9f\x53\x9a\x63\x44\x3f\x47\x1b\x4b\xfe\xec\xee\xf7\x58\xeb\x33\x1b\xcb\xc9\x67\x52\xc4\x90\xad\x30\x78\x8d\x02\x5a\x9e\x7d\x36\x36\x91\xe6\x4b\x57\xd7\xf2\xf1\xf9\xd5\xdf\x62\x77\xfc\x89\x25\xf3\x11\x51\xfb\xa7\xf9\xf2\x0c\xbd\xf7\x32\x5c\xa4\xd8\x7b\xee\xe9\xb0\xc0\x96\x3c\x03\x18\x64\x29\x41\x7c\x46\xeb\xc1\xd8\x7b\xcf\x7d\x37\x55\x33\x35\x56\xce\xe7\xf8\x0c\x71\x7e\x5d\x60\xdd\x49\x55\x61\xd3\x0f\x00\x83\x90\x9c\x35\xb5\x40\x9b\x5c\xe5\x5e\xdc\x1d\xb7\xfc\x9e\x45\x99\x25\xb5\x54\x9e\x6c\xdf\x48\xb9\xe6\x0b\x90\xa2\x06\x3a\xee\x99\xf7\x34\x4a\xa5\xb6\x9d\x7e\x67\x9a\x86\xa5\x70\xd2\x18\xdb\xee\x26\x43\x03\x69\x2d\xd5\x64\xdf\x9b\x8d\x50\xbf\x87\x20\x57\xf0\xb6\xe3\x5b\xdf\x2f\x99\x4e\x73\x4f\xbb\xaf\xa4\xc5\x55\x8b\x0b\xd3\xe5\x1e\x3d\x6a\x2b\x01\xb6\x40\xb4\xd8\xdf\xcf\x02\x1c\x39\x02\x94\xc6\x95\xc3\xc5\xf1\x69\x39\x03\x50\xa5\x37\xad\xa2\x3d\xa9\x53\x38\xe9\xfa\xe2\xa8\x4f\x2f\xde\x5b\x56\x76\x7f\xc3\x1d\x2e\xfb\x60\xd3\xe0\x67\x3a\xed\x51\x9a\xce\xe7\x39\xd7\xbe\x70\x7f\x76\x7a\x13\x06\x0d\x4d\x54\x51\xc5\x6d\x61\x23\xd4\xa6\x53\xa2\x1f\x7a\xe2\x9c\x96\x05\xa5\xc4\x57\x9e\x47\xdc\xce\x74\xaa\x42\x60\x03\xed\x49\xe3\x61\x47\x3a\xaf\x0a\xbe\x85\x25\x68\xc3\x17\xca\xe3\x40\xfe\x35\x4f\x1e\x0f\x84\x5a\xdc\xd3\x48\xa0\xbc\xc1\x9a\x20\x78\xc4\xf0\x26\x0b\x0f\x9f\xdd\xeb\xe5\xa8\x49\x99\x3a\x78\x1e\x05\x96\x28\x99\x87\x1f\x57\x06\x41\xed\x9a\xe6\xd0\xab\x7f\x1d\x79\xe9\xa5\xe6\xe1\xef\xe9\x64\x26\x16\x3c\xf5\x95\xcc\xa7\x50\xd1\x1b\x21\x2d\x04\x6a\xa1\x1c\xcd\x31\x1b\x76\x8e\x1a\xc0\x60\xab\x7b\xf8\xc2\x41\x75\x54\x73\xf0\x55\xe3\xe9\xaa\x75\x3c\xa2\x72\x00\x2a\x1e\xd1\x69\xf9\xbd\x23\xcc\xf8\xb9\x56\xc2\x7b\xd2\x31\x86\x2d\xf9\xcf\x31\x57\x07\x95\x9d\x0c\x36\x4e\xe1\xa9\xc2\x86\xf4\xc3\xa8\x3c\x0c\x3e\x75\x92\x05\x3b\x6c\x1c\x58\x20\xeb\x8c\x81\x74\xb9\xec\xd9\x8d\xdf\x91\x1e\x91\x6f\x36\x1b\x7d\x9b\x65\x38\xb3\x75\x3e\x2f\x53\x85\x8c\xc5\xed\xdd\x7c\xd8\x4d\xca\xd1\xd8\x55\xde\xf3\x64\x47\xd2\xff\x7e\xf1\x2d\x6a\xdc\xe1\xf2\x12\x4f\x41\x49\x09\x05\x64\xb8\x77\x7e\x35\x43\x6d\x7f\x1e\x98\xe1\x9c\x17\x82\x91\x68\x72\xe4\xd1\x52\x9c\x26\x58\xe5\xed\x83\x24\xd4\x3c\xb9\xbe\x88\x2f\x63\x24\x8b\x0c\x1c\x6e\xef\xce\x59\x94\x32\x75\x91\x45\xff\xc9\x24\x37\x4f\x39\xb5\x31\x7a\x23\xfc\x07\xd1\x8e\x21\x9a\x3d\x61\x63\xed\x02\x4d\x4f\xc5\xff\x01\x00\x00\xff\xff\xb8\x3e\x25\x24\xa8\x0d\x00\x00")

func dataEvalMachinesNixBytes() ([]byte, error) {
	return bindataRead(
		_dataEvalMachinesNix,
		"data/eval-machines.nix",
	)
}

func dataEvalMachinesNix() (*asset, error) {
	bytes, err := dataEvalMachinesNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/eval-machines.nix", size: 3496, mode: os.FileMode(420), modTime: time.Unix(1522843496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOptionsNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\xcd\x8e\x9b\x40\x10\x84\xef\xf3\x14\x25\x5f\xbc\x2b\x59\x3c\x40\x90\x0f\xb9\xe5\x10\x65\xa5\x28\x2f\x30\x40\x01\x23\x03\x3d\x9a\x6e\x62\x5b\x88\x77\x8f\xf8\x89\x93\x5d\xf9\x10\x29\x17\x5a\x14\x55\x5f\x77\xd3\x13\x4a\x19\xea\xd0\x9c\xd0\x85\xe2\x84\x78\x69\xf4\x84\x2c\xcb\x30\x7f\x72\xee\x1a\xac\x5d\xf4\xdc\xb9\x8e\xe6\xdc\x85\xf7\xb7\x68\x41\x06\xfd\x71\x8f\xc4\x19\x76\x8f\xd4\x4c\xc7\xa2\x97\x6a\xec\x88\x97\x69\xcf\x62\x72\x80\x6c\x5e\x9c\xd7\x37\xa0\xa2\x5a\x18\xfc\x22\xe2\x8c\xfe\xb2\xb1\xf6\x8f\x58\x61\x7f\x98\x96\xf2\x5d\xaf\xa8\x65\x0a\x71\x8f\x1d\xbe\xb3\x17\x23\xa2\xb7\xf6\xb0\x59\xe6\xdc\xad\x55\x65\x4c\x25\xff\x03\xfd\x55\x4a\xdf\x7d\x20\xaf\x8f\xf9\x35\x77\x2e\x0c\xce\xfd\xb5\x56\x56\x31\x76\x72\xef\x39\xd8\x63\x43\xf3\xa9\xa1\x7d\x11\xb5\x7f\x9f\x62\xde\x8a\xb2\x4c\x34\x7d\x96\xab\x58\xfb\xb1\x5b\xbb\xcc\xbf\x27\xe7\xcd\xf7\xb1\x5b\x70\x13\xa2\x57\xbd\x4a\xaa\x32\xe3\x6d\x71\x1d\x6a\x91\xc2\xa7\x43\x8e\x87\xfd\x5d\x6b\x6f\x96\xf4\xad\xc6\xfb\x73\x3e\xff\x27\xc7\xe3\x2e\x03\x9f\x97\x18\x0d\xd7\x96\x89\xa0\x2f\x5b\x2c\xa4\x50\x8c\xc6\x3d\x55\x50\xe1\x17\x2e\x4c\x50\x10\xa5\xc4\xc0\x0a\x3f\x83\x87\x6a\xfb\x20\x85\x41\x8d\xbe\x82\xd4\xb0\x36\xc9\xd8\xb4\xb0\x96\xf8\x16\x6e\x28\x3b\xd1\x31\x11\x2f\x17\x32\x86\xa1\x41\x30\xc8\x68\x9b\x75\xb3\xa8\x49\x62\xf6\xba\xd3\x8e\xc7\x0f\xa7\x72\xbf\x02\x00\x00\xff\xff\x5c\xf3\xee\x8e\xd3\x02\x00\x00")

func dataOptionsNixBytes() ([]byte, error) {
	return bindataRead(
		_dataOptionsNix,
		"data/options.nix",
	)
}

func dataOptionsNix() (*asset, error) {
	bytes, err := dataOptionsNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/options.nix", size: 723, mode: os.FileMode(420), modTime: time.Unix(1522831538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/eval-machines.nix": dataEvalMachinesNix,
	"data/options.nix": dataOptionsNix,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"eval-machines.nix": &bintree{dataEvalMachinesNix, map[string]*bintree{}},
		"options.nix": &bintree{dataOptionsNix, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

