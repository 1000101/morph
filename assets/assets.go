// Code generated by go-bindata.
// sources:
// data/eval-machines.nix
// data/options.nix
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataEvalMachinesNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x6f\xdb\x38\x13\xbe\xeb\x57\x3c\x70\x03\xd8\x46\x1a\xa5\xef\x7b\x5b\x1b\x3e\x74\x8b\xfd\x02\xfa\x11\xb4\x45\x2f\x41\xb0\xa0\xad\x91\x4d\x84\x22\x55\x92\x72\xe2\x35\xfc\xdf\x17\x43\x8a\xa2\x9c\x06\x8b\x46\x07\x5b\x1a\x0e\x87\x33\xcf\x3c\x9c\x99\x57\x78\x67\x9a\x56\x91\x27\x75\x80\xf3\x56\xb6\x2d\x55\xa8\xcc\x83\xc6\x9e\xac\x93\x46\xc3\xd4\xd0\xf2\xd1\xb4\x6e\x0a\xda\x0b\xd5\x09\x6f\x6c\x71\x84\x26\xff\x60\xec\xfd\x6f\x8f\xad\xc5\x69\x51\x14\x8a\x7c\x81\x24\xc5\x0a\xb2\x69\x8d\xf5\x63\xb5\x65\x01\xb4\xf7\x5b\x07\x00\xab\xb4\x50\xa6\x7f\x5e\x61\x0d\x25\xd7\x88\x1a\x2c\x29\x95\x5c\x2f\x0b\xa9\x0b\xe0\x41\xfa\x1d\x92\x56\xf8\x08\x6b\x85\xa5\x0d\x8e\x05\x10\x43\xe9\x3c\xc1\xef\x08\x15\xd5\x52\x4b\x2f\x8d\x76\x1c\x01\x8b\x1a\xb1\xd9\x49\x4d\xae\x64\x3f\x4d\x45\x0e\xab\x82\x4f\x52\xd2\xf9\xaf\xe6\xad\xf7\xd6\x61\xd6\x88\x96\x7f\x82\xe6\x47\xd1\xd0\x22\xa8\x00\x31\xbc\xf8\xbc\xc2\x1f\xe4\x83\xc9\x8d\xd1\xb5\xdc\x76\x56\xf8\x1e\x29\xbf\x93\x2e\x1d\x84\xda\x9a\x06\x24\x36\xbb\x14\xec\xc8\x02\x3d\xb6\x96\x1c\x03\xfc\x1a\xc2\xfb\xb0\x63\x8b\xbf\x6b\xa9\x88\xbf\xad\x5c\x77\x9e\x1c\x9c\x09\xe7\x7c\x94\x8f\x9f\xbe\xa0\x31\x55\xa7\x68\x64\xc4\x1d\x9c\xa7\x06\x1b\xa1\xb1\x95\x7b\x82\x23\xed\xe4\x5a\x11\xc8\x5a\x63\xd1\x90\x73\x62\x1b\x03\x8e\x4f\xb4\xe0\xb0\xc2\x2d\x8e\x7d\x8a\xe2\x57\x4a\xc3\xc5\x71\x14\xfc\x09\x77\x4b\x9c\x58\x53\xef\xc8\x4a\x8f\x59\xaf\x36\x8f\x9e\xf2\xe2\xdd\xb2\xb7\x1e\x92\xc4\xcf\x11\x5a\x34\x84\x15\x46\x96\x96\x83\x0b\x4c\x21\xca\xfc\x98\x5c\x1c\xbd\xf9\xe2\x2d\x47\x1f\x12\xde\x0a\xbf\x3b\x5d\x33\xe3\xdc\xb5\x92\xeb\x6b\xe6\xdc\x55\xc4\xb9\xd4\xf2\x71\x12\x72\x9d\x9e\xe4\x57\xa2\xc5\x0f\x71\x8e\x64\x59\x7a\x79\x79\x26\x66\x28\xee\xe9\x80\x15\x26\x15\xb5\xca\x1c\xae\x9c\xef\xea\x7a\xb2\x3c\xd3\x0a\xc7\x8d\x00\x2b\xaf\x4d\x1b\xe8\xc5\x5e\x65\x14\xf2\xf3\x0a\x37\xd6\xec\x65\x45\x10\xcc\x46\xd1\x29\x8f\x9d\x71\x3e\x80\x23\x74\x85\x78\x58\x43\xda\xc3\x0b\xbb\x25\x0f\xfa\xde\x09\xf5\x8c\x21\x1f\x59\x30\xf0\x22\x02\x7c\x4e\x6b\x48\x1d\x3f\x4d\x45\xaa\xfc\xc1\x48\x9f\x38\xa9\xb7\x25\x3b\xf1\xb1\xcf\xd0\xfd\xa7\x3d\x59\xcb\x4e\xfe\xf2\xe6\xcd\xf3\x09\x4b\x4f\x76\xb7\x8c\xee\xfe\x69\x9c\x7f\x91\x8d\xd3\xd9\xf7\x19\x64\xf4\xe8\xad\x78\x6b\xb7\x8c\x6d\xa6\x5b\xbc\xa5\xcb\xe7\xf8\x84\x53\xde\x3e\xbc\xc6\x03\xe6\x98\x31\x52\xac\xe6\x30\xb3\xd4\x98\x3d\xc5\xdb\x9d\xaa\xd3\x2d\x26\xfd\xeb\x84\x73\x1e\x72\xe3\x26\x98\x58\x72\xa6\xb3\x1b\x8a\xef\xdf\x3b\x69\x69\x82\x49\xa0\xfa\x04\x77\xf3\xf9\x7c\x59\x14\xc5\x18\x89\xbf\x74\x6d\x3e\x04\x56\xb1\xdf\xc5\x39\x4c\x83\x08\x29\x80\xbc\x36\x86\x47\xd8\x6d\xc7\x32\x8e\x5d\xd8\x4c\xe4\x84\x42\xd7\xc9\x2a\xca\x42\xa0\xa7\x65\x11\xaa\xdd\xcd\x4e\x38\xc2\xff\x16\xa9\x2a\x13\x8c\x56\x87\xbe\xf8\x0d\x3e\xe4\x5a\xc2\x9c\x90\xba\x36\xa9\xea\x0d\x05\xad\x87\x62\x9a\x8b\x72\xf2\x20\xe0\x1f\xe4\xfc\x12\xa5\x52\x23\x56\xdc\xf0\x95\x6a\xea\x70\xd3\x6a\x25\x5b\x34\xa2\xed\x01\x0f\x09\x9c\xe9\x05\xf6\xd3\x05\x1f\x89\x3d\x56\x70\x1b\xdb\xad\x3f\x85\xdb\xf3\x2d\x54\x83\xfd\x74\x99\xcb\x07\xc6\xf5\x66\x5f\xf6\x57\x3f\x87\x34\xc7\x88\x7e\x8e\x36\x96\xfc\xd9\xdd\xff\xef\xbd\x7b\xce\xf5\x58\xbd\x4f\x8d\x3e\x93\x71\xf5\xf9\x4c\x8a\x18\xe1\x15\x06\x43\xb1\xde\x96\x67\xcb\xc6\x26\x8e\x7d\xe9\xea\x5a\x3e\x3e\xaf\xfd\x2d\x36\xd3\x9f\x50\x99\x8f\x78\xdd\xbf\xcd\x97\x67\x60\xbf\x97\xe1\xde\xc5\x56\x75\x4f\x87\x05\xb6\xe4\x19\xef\x50\xc5\x52\x46\xce\x6e\xc1\x20\xec\xad\xe7\x36\x9d\x92\x9f\xfa\x30\xc7\x73\x7c\x86\x67\xff\x5f\x60\xdd\x49\x55\x61\xd3\xcf\x0b\x43\xdd\x39\xeb\x81\x81\x65\x99\x14\x7d\x2f\x70\x3c\x21\xf4\xa4\xcb\xa4\xaa\xa5\xf2\x64\xfb\xbe\xcb\x14\x59\x80\x14\x35\xd0\x71\xcf\xbc\x67\x5d\x62\x86\xed\xf4\x3b\xd3\x34\x5c\x39\x27\x8d\xb1\xed\x6e\x32\xf4\x9b\xd6\x52\x4d\xf6\xbd\xd9\x08\xf5\x6b\x70\x72\x05\x6f\x3b\x2e\x12\xbd\xca\x74\x9a\x5b\xe0\x7d\x25\x2d\xae\x5a\x5c\x98\x2e\xb7\xf4\x51\x17\x0a\xb0\x05\x5e\xc6\x71\xe0\xcc\xc1\x91\x21\x40\x69\x5c\x39\x5c\x1c\x9f\xa6\x33\x00\x55\x7a\xd3\x2a\xda\x93\x3a\x85\x93\xae\x2f\x8e\xfa\xf4\xe2\xbd\x65\x65\xf7\x37\xdc\x10\xb3\x0d\x16\x0d\x76\xa6\xd3\x1e\xa5\xe9\x7c\x9e\x63\xed\x13\xf7\x7b\xa7\x37\x61\x2e\xd1\x44\x15\x55\xdc\x45\x36\x42\x6d\x3a\x25\xfa\x19\x29\x8e\x75\xb9\xfe\x94\xf8\xca\xe3\x8b\xdb\x99\x4e\x55\x08\x6c\xa0\x3d\x69\x3c\xec\x48\x67\xad\x60\x5b\x58\x82\x36\x7c\xff\x3c\x0e\xe4\x5f\xf3\xa0\xf2\x40\xa8\xc5\x3d\x8d\xea\x99\x37\x58\x13\x04\x4f\x24\xde\xe4\x3a\xc5\x67\xf7\xe5\x75\xd4\xd3\x4c\x1d\x2c\x8f\x1c\x4b\x94\xcc\xb3\x92\x2b\x43\xfd\xed\x9a\xe6\xd0\x37\x8b\x3a\xf2\xd2\x4b\xcd\xb3\xe2\xd3\x41\x4e\x2c\x78\x48\x2c\x99\x4f\x21\xa3\x37\x42\x5a\x08\xd4\x42\x39\x9a\x63\x36\xec\x1c\xf5\x8b\x41\x56\xf7\xf0\x85\x83\xea\x58\xfc\xc1\x57\x8d\x87\xb1\xd6\xf1\x44\xcb\x0e\xa8\x78\x44\xa7\xe5\xf7\x8e\x30\xe3\xf7\x5a\x09\xef\x49\x47\x1f\xb6\xe4\x3f\xc7\x58\x1d\x54\x36\x32\xc8\x38\x84\xa7\x05\x39\x84\x1f\x26\xeb\x61\x4e\xaa\x53\x59\xb0\xc3\xc6\x81\x05\xb2\xce\x18\x48\x97\xd3\x9e\xcd\xf8\x1d\xe9\x11\xf9\x66\xb3\xd1\xda\x2c\xc3\x99\xa5\xf3\x79\x99\x32\x64\x2c\x6e\xef\xe6\xc3\x6e\x52\x8e\xc6\xa6\xf2\x9e\x27\x3b\x52\xbb\xe8\x95\x6f\x51\xe3\x0e\x97\x97\x78\x0a\x4a\x0a\x28\x20\xc3\xad\xf6\xab\x19\x72\xfb\xf3\xc0\x0c\xe7\xbc\x10\x8c\x44\x93\x23\x4f\xa2\xe2\x34\xc1\x2a\x6f\x1f\x4a\x42\xcd\x83\xee\x8b\xf8\x32\x46\xb2\xc8\xc0\xe1\xf6\xee\x9c\x45\x29\x52\x17\x59\xf4\x8f\x4c\xe5\xe6\x29\xa7\x36\x46\x6f\x84\xff\x20\xda\x31\x44\xb3\x27\x6c\xac\x5d\xa0\xe9\xa9\xf8\x37\x00\x00\xff\xff\xb3\x7b\xbe\xf0\xd7\x0d\x00\x00")

func dataEvalMachinesNixBytes() ([]byte, error) {
	return bindataRead(
		_dataEvalMachinesNix,
		"data/eval-machines.nix",
	)
}

func dataEvalMachinesNix() (*asset, error) {
	bytes, err := dataEvalMachinesNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/eval-machines.nix", size: 3543, mode: os.FileMode(420), modTime: time.Unix(1523027176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOptionsNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4b\x6f\xf3\x36\x10\xbc\xeb\x57\x2c\xd4\x83\xbf\x00\xa9\x6a\x3b\x01\x5a\x54\xf0\xa1\x68\x81\x26\x40\x50\x07\x41\xda\x4b\x90\x03\x4d\xad\x2d\xc2\xb4\x96\xe0\xae\xfc\x80\xe1\xff\x5e\x50\x52\xfc\x50\x94\xc4\x49\x74\x08\x19\x3e\x86\x3b\xc3\xe1\xc0\x5b\xd0\x54\x4c\xcd\xec\x12\xac\x99\x5c\x82\x9b\xcf\xf8\x12\x92\x24\x81\xdd\xef\x51\xb4\x32\x92\x87\xf1\x74\xdf\x4b\x64\xe3\x90\xd3\x28\xb2\x28\x51\x44\xab\x02\xfd\xd8\x89\xa1\x82\x1f\x37\x0e\x61\x04\x5c\x4e\x16\x94\x95\x16\xe1\xc7\xb6\xc1\x81\x6d\x04\x00\x40\xf5\x3a\x18\x35\xff\x87\x6f\xe6\xa9\x74\x30\x82\xc5\xbc\x46\x39\x9a\x0a\x9f\x34\x98\xe2\xd3\x93\xf1\x0c\x59\x7b\x53\xef\x18\x41\xfc\x77\x85\x22\xb9\x12\x58\x19\x6b\x81\x56\x05\x48\x8e\xc0\xa8\x3d\x4a\x12\xb7\x37\x4f\x55\x69\x25\x6c\xf4\x44\x72\x34\xbb\x4b\xa3\x7d\xbf\x64\xf4\xdf\x2e\xec\xdf\x00\xb2\xca\xe9\xdb\x65\x35\xcd\xee\x22\x8d\xa2\x39\x6e\xce\x93\xbc\x2d\x78\x86\x2c\xa6\x50\x4d\x71\xaf\x98\xbd\xe6\xd4\x62\xf3\x80\x0b\x12\x04\xa7\x24\x8f\xf7\x25\x55\x2d\x53\xe9\x35\x7e\x09\xf4\x8e\xb4\xb2\x5d\x98\x95\xb7\xba\x20\x0f\x42\x6d\x77\xe9\xe9\x31\x6d\x3f\x76\x9f\xd9\xeb\xed\xa5\x1d\x57\x87\xd0\xf4\xf8\x5e\x9a\xc9\x5e\xef\xb4\x1e\x87\x7e\x61\x98\x1b\x45\xdf\xa9\x2a\xee\x5f\xf7\xfb\x71\x7a\xae\x00\xf7\x47\xb8\xb8\x76\x1e\x99\x31\x03\xc5\x40\x5a\x94\x4d\x0e\xaa\x1c\x1c\xb0\x0c\x27\x9d\xe3\x81\x96\x09\x2a\x24\x11\x7b\xee\x45\xed\x19\x5d\x5f\x0d\xfb\xfd\x45\x9c\xc2\x4f\x70\xd5\x87\x4c\x6d\xb8\x9b\xcb\xe3\xe3\x1d\x4c\xc9\x37\x4a\x82\xd0\x1c\x0b\xae\x46\x24\x37\x0c\x39\xb1\x24\xad\x6b\xd6\x26\xf3\x9d\x82\x36\x05\x59\xc3\x32\x9e\x76\xd7\xf5\xf4\xfc\x32\x86\x6b\xb5\x70\x36\xac\x7f\x8a\x07\xbf\x0e\x93\x61\x3f\x19\x0c\x92\xc1\xf0\x97\xab\x61\xfc\xfc\x86\xf0\xb7\xf7\xcb\x6b\xf8\xf3\xf6\xaf\x07\x98\x58\xd2\xf3\x3a\x3f\xb4\x2a\xc0\xd2\xcc\x14\x50\xb2\x29\x66\x9f\x61\xe2\xc8\x1a\x6d\xf0\xcb\x64\xe2\xa6\x1f\x77\xb2\x9a\xff\xc6\x31\xc4\x9a\x0a\xf1\x64\x7f\x76\x56\x15\xf8\x26\xb3\xff\x2a\x48\xa5\x35\x32\x1f\xca\x12\x02\xe5\x9c\xdd\xbc\xc7\x22\xfc\xad\x2c\x66\x8a\x28\x3a\xca\x90\x24\x43\x67\x69\xb3\xc0\x42\xf6\x71\x22\xca\xcf\x50\x6e\x88\xe5\x1c\x3f\x35\x4f\xb5\xd6\xf3\x83\x17\x74\x78\xd7\x07\x05\xb6\xe0\x14\xf3\x8a\x7c\x96\x08\xae\x2b\x57\x4e\x89\x26\xca\xc7\x29\xb4\x63\x40\x89\x78\x1e\x4f\xe1\x34\x29\x3f\x0c\x83\x3f\xc2\x36\x14\x58\xe5\xe8\x11\x50\xe9\xbc\x42\x32\x93\x52\xb0\xd9\x35\x41\x06\x15\x70\x83\x9a\x13\x04\x4d\xce\x60\x06\x4b\xa3\x80\x39\xdf\x23\x99\x82\x05\x55\x56\x07\x8b\xa7\x72\x96\x57\x01\xf3\x8f\x59\x83\xb6\xc4\xa5\x47\xf8\x31\x47\x74\xc1\x61\x46\x80\x4a\x79\xc9\xa0\xb0\x84\x85\x3c\x26\x17\xaf\x73\x28\x34\xcb\x46\xa3\xcf\xc4\x62\x3b\x2f\x3e\x54\xe2\x46\x71\x6e\x34\x79\x07\xb5\x95\x5e\x42\x24\x38\xa7\xfe\xb9\x50\xfa\x50\xbb\x72\xce\x93\xc5\xe3\xe7\x11\x3c\xc5\x1d\x19\x5a\xa7\x57\xf4\x7f\x00\x00\x00\xff\xff\x1e\xee\x9f\xde\x6f\x08\x00\x00")

func dataOptionsNixBytes() ([]byte, error) {
	return bindataRead(
		_dataOptionsNix,
		"data/options.nix",
	)
}

func dataOptionsNix() (*asset, error) {
	bytes, err := dataOptionsNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/options.nix", size: 2159, mode: os.FileMode(420), modTime: time.Unix(1523027176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/eval-machines.nix": dataEvalMachinesNix,
	"data/options.nix": dataOptionsNix,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"eval-machines.nix": &bintree{dataEvalMachinesNix, map[string]*bintree{}},
		"options.nix": &bintree{dataOptionsNix, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

