// Code generated by go-bindata.
// sources:
// data/eval-machines.nix
// data/options.nix
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataEvalMachinesNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4b\x6f\xdb\x38\x10\xbe\xeb\x57\x0c\xd4\x00\xb6\x90\x46\xe9\xee\x6d\x6d\xf8\xd0\x2d\xf6\x05\xf4\x11\xb4\x45\x2f\x41\xb0\xa0\xa5\x91\x45\x98\x22\x55\x92\x52\xe2\x35\xfc\xdf\x17\xc3\x87\x28\xbb\x39\x34\x3e\x24\xd2\x88\x1c\xce\x7c\xf3\xf1\x9b\x79\x05\xef\x54\xd7\x0b\xb4\x28\x0e\x60\xac\xe6\x7d\x8f\x35\xd4\xea\x51\xc2\x88\xda\x70\x25\x41\x35\x20\xf9\x93\xea\xcd\x02\x70\x64\x62\x60\x56\xe9\xec\x08\x12\xed\xa3\xd2\xfb\x3f\x9e\x7a\x0d\xa7\x55\x96\x09\xb4\x19\x44\x2b\x6c\x80\x77\xbd\xd2\x76\xbe\x6c\x9d\x01\xf4\xfb\x9d\x01\x00\xd8\xc4\x0f\x65\xfc\x4f\x5f\x68\x85\xe0\x5b\xf0\x2b\xc8\x52\x0a\xbe\x5d\x67\x5c\x66\x00\x8f\xdc\xb6\x10\x57\xb9\x17\xf7\x2d\xd3\x58\xc1\x31\x03\xf0\xa9\x0c\x16\xc1\xb6\x08\x35\x36\x5c\x72\xcb\x95\x34\x94\x01\x99\x3a\x56\xb5\x5c\xa2\x29\x29\x4e\x55\xa3\x81\x4d\x46\x27\x09\x6e\xec\x57\xf5\xd6\x5a\x6d\x60\xd9\xb1\x9e\xfe\xb8\x95\x1f\x59\x87\x2b\xb7\x04\xc0\xa7\xe7\x7f\xaf\xe0\x2f\xb4\xce\x65\xa5\x64\xc3\x77\x83\x66\x36\x20\x65\x5b\x6e\xe2\x41\xd0\x68\xd5\x01\xb2\xaa\x8d\xc9\xce\x3c\xe0\x53\xaf\xd1\x10\xc0\xaf\x81\x59\xeb\x76\xec\xe0\xdf\x86\x0b\xa4\x77\xcd\xb7\x83\x45\x03\x46\xb9\x73\x3e\xf2\xa7\x4f\x5f\xa0\x53\xf5\x20\x70\xe6\xc4\x1c\x8c\xc5\x0e\x2a\x26\x61\xc7\x47\x04\x83\xd2\xf0\xad\x40\x40\xad\x95\x86\x0e\x8d\x61\x3b\x9f\xb0\xff\x79\x0f\x06\x36\x70\x0f\xc7\x50\x22\xff\x16\xcb\x70\x75\x9c\x25\x7f\x82\x87\x35\x9c\x68\xa5\x6c\x51\x73\x0b\xcb\xb0\xac\xf0\x91\xd2\xc7\x87\x75\xf0\xee\x8a\x44\xbf\x23\x48\xd6\x21\x6c\x60\xe6\x69\x3d\x85\x40\x14\xc2\xc4\x8f\xfc\xea\x68\xd5\x17\xab\x29\x7b\x57\xf0\x9e\xd9\xf6\x74\x4b\x8c\x33\xb7\x82\x6f\x6f\x89\x73\x37\x1e\xe7\x52\xf2\xa7\xdc\xd5\x3a\xfe\x62\x5c\x91\x16\x3f\xe4\x39\xb3\x25\xeb\xf5\xf5\x99\x99\xa0\xd8\xe3\x01\x36\x90\xd7\xd8\x0b\x75\xb8\x31\x76\x68\x9a\x7c\x7d\xb6\xca\x1d\x37\x03\xac\xbc\x55\xbd\xa3\x17\x45\x95\x50\x48\xbf\x57\x70\xa7\xd5\xc8\x6b\x04\x46\x6c\x64\x83\xb0\xd0\x2a\x63\x1d\x38\x4c\xd6\xe0\x0f\xeb\x50\x5a\xb0\x4c\xef\xd0\x02\x7e\x1f\x98\x78\xc6\x91\xf5\x2c\x98\x78\xe1\x01\x3e\xa7\x35\x70\xe9\x5f\x55\x8d\xa2\xfc\xc1\x49\x28\x1c\x97\xbb\x92\x82\xf8\x18\x2a\xb4\xff\x34\xa2\xd6\x14\xe4\x6f\x6f\xde\x3c\x5f\xb0\xf8\x4b\xe1\x96\x3e\xdc\xbf\x95\xb1\x2f\xf2\x71\x3a\x7b\x3f\x83\x0c\x9f\xac\x66\x6f\xf5\x8e\xb0\x4d\x74\xf3\xb7\x74\xfd\x1c\x9f\xe0\x94\xb6\x4f\x8f\xfe\x80\x02\x96\x84\x14\x2d\x33\xb0\xd4\xd8\xa9\x11\xfd\xed\x8e\xea\x74\x0f\x79\x78\xcc\xa9\xe6\xae\x36\x26\x87\x5c\xa3\x51\x83\xae\xd0\x3f\x7f\x1f\xb8\xc6\x1c\x72\x47\xf5\x1c\x1e\x8a\xa2\x58\x67\x59\x36\x47\xe2\x1f\xd9\xa8\x0f\x8e\x55\x14\x77\x76\x0e\xd3\x64\x82\x98\x40\xfa\x36\x87\x87\xe9\xdd\x40\x36\xca\x9d\xe9\x44\xe4\x88\xc2\x30\xf0\xda\xdb\x5c\xa2\xa7\x75\xe6\xd4\xee\xae\x65\x06\xe1\x97\x55\x54\x65\x04\x25\xc5\x21\x88\xdf\x14\x43\xd2\x12\xe2\x04\x97\x8d\x8a\xaa\x37\x09\x5a\x80\x62\x91\x44\x39\x46\xe0\xf0\x77\x76\x7a\xf0\x56\x2e\xc1\x2b\xae\x7b\x8b\x9a\x3a\xdd\xb4\x46\xf0\x1e\x3a\xd6\x07\xc0\x5d\x01\x97\x72\x05\xe3\x62\x45\x47\xc2\x08\x1b\x30\x95\x1e\xb6\x9f\xdc\xed\xf9\xe6\xd4\x60\x5c\xac\x93\x7c\xc0\x5c\x6f\xc6\x32\x5c\xfd\x94\x52\x01\x33\xfa\x19\xac\x34\x5a\x03\x2d\x32\x61\xdb\x77\x2d\x56\x7b\x03\x23\xd5\x73\xce\xae\x00\xbf\x3c\xb3\x91\xc2\x7c\x46\x81\x84\xe2\x06\xa6\x83\xbc\xa6\x96\x67\x9f\x95\x8e\x3c\xfa\x32\x34\x0d\x7f\x7a\x7e\xf5\x37\xdf\x30\x7f\x62\x49\x31\xe3\x6e\x78\x2a\xd6\x67\x80\xbe\xe7\xee\x6e\xf9\x76\xb4\xc7\xc3\x0a\x76\x68\x09\x53\xa7\x54\x11\xf5\x33\xa6\x4f\xc6\xe0\x3d\xb5\xe2\x58\xe0\xd8\x6b\x29\x9f\xe3\x33\x5c\xfa\x75\x05\xdb\x81\x8b\x1a\xaa\x30\x13\x4c\xda\x72\xd6\xe7\x1c\x93\x52\xe1\x83\xde\x1b\x9a\x02\x02\xb1\x12\x71\x1a\x2e\x2c\xea\xd0\x5b\x89\x06\x2b\x40\x81\x1d\x48\xbf\xa7\x08\xcc\x8a\xd5\xd7\x83\x7c\xa7\xba\x8e\xd4\x31\xef\x94\xee\xdb\x7c\xea\x29\xbd\xc6\x06\xf5\x7b\x55\x31\xf1\xbb\x0b\x72\x03\x56\x0f\x24\x04\x61\xc9\x62\x91\xda\xdc\xbe\xe6\x1a\x6e\x7a\xb8\x52\x43\x6a\xdb\xb3\x4e\xe3\x60\x73\xdc\xf3\x2d\xff\x2c\xc0\x99\x23\x00\x21\xe1\xc6\xc0\xd5\xf1\xb2\x9c\x0e\xa8\xd2\xaa\x5e\xe0\x88\xe2\xe4\x4e\xba\xbd\x3a\xca\xd3\x8b\xf7\x96\xb5\x1e\xef\xa8\xe9\x25\x1f\x64\x9a\xfc\x2c\x16\x01\xa5\x45\x51\xa4\x5c\x43\xe1\xfe\x1c\x64\xe5\x66\x0f\x89\x58\x63\x4d\x9d\xa2\x62\xa2\x1a\x04\x0b\x73\x90\x1f\xdd\x92\xc6\x94\xf0\x95\x46\x14\xd3\xaa\x41\xd4\xe0\xd8\x80\x23\x4a\x78\x6c\x51\xa6\x55\xce\x37\xd3\x08\x52\xd1\x1d\xb3\x70\x40\xfb\x9a\x86\x91\x47\x84\x86\xed\x71\xa6\x59\x56\xc1\x16\x81\xd1\xd4\x61\x55\xd2\x22\x3a\x3b\x48\xe8\xac\x6f\xa9\xc6\x79\x9e\x05\x16\x29\x99\xe6\x21\x53\x3a\x8d\x1d\xba\xee\x10\x1a\x42\xe3\x79\x69\xb9\xa4\x79\xf0\x72\x58\x63\x2b\x1a\x04\x4b\xe2\x93\xab\xe8\x1d\xe3\x1a\x18\x34\x4c\x18\x2c\x60\x39\xed\x9c\xf5\x84\xc9\xd6\x04\xf8\xdc\x41\x8d\x17\x78\xa0\xab\x46\x03\x57\x6f\x68\x6a\xa5\x00\x84\x3f\x62\x90\xfc\xfb\x80\xb0\xa4\xe7\x46\x30\x6b\x51\xfa\x18\x76\x68\x3f\xfb\x5c\x0d\x88\xe4\x64\xb2\x51\x0a\x97\xa2\xeb\xd2\x77\xd3\xf3\x34\x0b\x35\x51\x16\xf4\xb4\x71\x62\x01\x6f\x12\x06\xdc\xa4\xb2\x27\x37\xb6\x45\x39\x23\xdf\x72\x39\xfb\xb6\x4c\x70\x26\x6b\x51\x94\xb1\x42\x4a\xc3\xfd\x43\x31\xed\x46\x61\x70\xee\x2a\xed\xb9\xd8\x11\x5b\x42\x58\x7c\x0f\x0d\x3c\xc0\xf5\x35\x5c\x82\x12\x13\x72\xc8\x50\x3b\xfd\xaa\xa6\xda\xfe\x3c\x30\xd3\x39\x2f\x04\x23\xd2\xe4\x48\xd3\x26\x3b\xe5\xb0\x49\xdb\x27\x49\x68\x68\x98\x7d\x11\x5f\xe6\x48\x66\x09\x38\xb8\x7f\x38\x67\x51\xcc\xd4\x78\x16\xfd\xc7\xa3\xdc\x5c\x72\xaa\x52\xb2\x62\xf6\x03\xeb\xe7\x10\x2d\x2f\xd8\xd8\x18\x47\xd3\x53\xf6\x7f\x00\x00\x00\xff\xff\xfa\xb3\xcc\x11\xbb\x0d\x00\x00")

func dataEvalMachinesNixBytes() ([]byte, error) {
	return bindataRead(
		_dataEvalMachinesNix,
		"data/eval-machines.nix",
	)
}

func dataEvalMachinesNix() (*asset, error) {
	bytes, err := dataEvalMachinesNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/eval-machines.nix", size: 3515, mode: os.FileMode(420), modTime: time.Unix(1523347553, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOptionsNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x5f\x6f\xdb\x36\x10\x7f\xd7\xa7\x38\xa8\x0f\x49\x80\x56\x71\xd2\x0e\x1b\x66\xe4\x61\xe8\xd6\xa5\x40\xd1\x14\x8d\xb7\x97\xa2\x0f\x34\x75\xb6\x08\x53\x3c\x8d\x3c\xd9\x31\x8c\x7c\xf7\x81\x92\x2c\x4b\xb2\xa4\x38\xe9\xcb\x80\xf9\xc5\x34\xa9\xbb\xfb\xdd\x1f\xfd\xee\xe8\x1d\x48\x32\x0b\xb5\x7c\x0d\x5a\xcd\x5f\x43\xb6\x5a\xba\xd7\x10\x45\x11\x3c\xfe\x1a\x04\x1b\xc5\x89\xdf\x9f\xd6\xab\x88\xb7\x19\xba\x69\x10\x68\xe4\x20\xa0\x8d\x41\x7b\x97\xb1\x22\xe3\x66\xdb\x0c\xe1\x06\x5c\x3e\x4f\x29\xce\x35\xc2\xf9\xae\xd2\x03\xbb\x00\x00\x80\xca\xe7\xe0\xa6\xfa\xed\x3f\x4b\x4b\x79\x06\x37\x90\xae\x4a\x2d\x8d\x23\xff\xe1\x4a\x27\xdb\x69\x6b\x3f\x46\x27\xad\x2a\x25\x6e\x20\xfc\xb3\xd0\xc2\x89\x60\xd8\x28\xad\x81\x36\x06\x38\x41\x70\x28\x2d\x72\x14\x76\x85\x17\x22\xd7\xec\x05\x2d\x11\x37\x4e\x1f\xa7\x41\xbd\xce\x1d\xda\x1f\x06\xf6\x97\x57\xb2\x49\xe8\x87\x61\x55\x5f\x8f\x17\xd3\x20\x58\xe1\xf6\xb4\x90\x77\x03\x1e\xa3\x63\x65\x44\x05\xee\xc8\xb3\x63\x9f\x3a\xde\x7c\xc5\x94\x18\x21\x13\x9c\x84\x35\xa4\xe2\xdb\x51\x6e\x25\xbe\x48\xe9\x27\x92\x42\xf7\xe9\x2c\x6a\xab\x4f\xe5\x21\x50\xbb\xc7\x69\xdb\x4c\xb7\x1e\xfb\x6d\x9e\x9d\xd5\xa1\xbd\x2b\x8c\xd0\xa2\x99\x97\xea\xf0\xec\xac\x8d\x27\x43\x9b\x2a\xe7\xaa\x88\x8e\xa0\x0a\x27\xef\x26\x93\x70\x7a\x6a\x00\xbe\x34\xf4\xe2\x43\x66\xd1\x39\x8c\x41\x38\x20\xc9\x42\x47\x87\xa8\x1c\x2a\x60\xed\x2d\x9d\x52\x03\x9d\x22\x28\x34\xa1\x11\x73\x5d\xe6\xea\x8f\x62\x59\x39\x12\xfe\x5d\xe0\x5f\xa0\xe0\xdc\xa2\x0b\x2b\xb7\x99\xf5\xa9\x79\xad\x03\xf0\xee\xed\xf5\x64\x92\x86\x53\x78\x05\x6f\x27\x10\x8b\xad\xeb\x77\x7d\x36\xfb\x04\x0b\xb2\x55\xe0\x81\x69\x85\xc6\x15\x3b\x9c\x28\x07\x09\x39\x8e\x3a\x55\x21\x55\x6c\x7b\xe3\x5f\x01\xd2\xca\xf1\xdd\xa2\x1f\xd7\xb7\xef\xfb\x3d\x7c\x10\x69\x56\x04\xe1\x5b\x78\xf5\xf3\x75\x74\x3d\x89\xae\xae\xa2\xab\xeb\xcb\xb7\xd7\xe1\xf7\x81\x3c\x7d\xfc\xb2\x7e\x07\xef\x3f\xfe\xfe\x15\xe6\x9a\xe4\xaa\xa4\x1b\x29\x0c\x68\x5a\x2a\x03\xb9\x53\x66\xf9\x1c\x4f\x32\xd2\x4a\x2a\x7c\xb1\x33\x61\xb5\x0e\x7b\xbd\x5a\xfd\xe2\x42\x08\x25\x19\xb6\xa4\xdf\x64\x5a\x18\x1c\xf4\xac\x4c\xbc\x90\x12\x9d\x3b\xc0\x62\x02\x91\x65\x7a\x3b\xee\x45\x83\x53\x3e\x28\x3d\x4a\x01\x75\x85\xee\x0e\x2c\xdb\xd7\x13\xa0\x60\x83\x97\x70\x6f\x5d\x80\x97\x6b\x61\x2f\xcb\x5c\xb8\xcb\xe2\x6d\x89\xd0\xac\x8f\x08\xb7\x15\x85\x0f\xb9\x2e\x79\x08\xce\x95\x91\x3a\x8f\x7d\x3e\x17\x4a\xa3\x11\x29\x5e\xec\x39\xc2\x96\x1c\x88\x66\xfd\xc6\x9f\xc1\x26\x51\x32\x29\xe9\x3d\x21\x1d\x43\x19\x4b\x69\x31\x46\xc3\x4a\x68\xd7\xa6\xf9\x66\x87\x19\xa1\xb8\x96\xa3\x43\xa4\xd6\xf5\x7a\xb7\xef\x59\x55\xff\xa8\x9b\xeb\xfe\xf7\xe3\xd3\xbd\xea\xb8\x87\x16\x5e\xfa\x3a\x12\xca\xf8\x88\x1c\x39\x08\x64\x9a\x91\x69\x16\x49\x9f\xcf\x4f\xd0\xe8\xc9\x29\x6e\x91\x6c\xaf\x43\xa7\x11\x6b\x8d\xf1\x68\x59\x2f\x06\xfb\xce\x9e\x94\x4b\x56\x4e\x50\x68\x4e\xde\x27\x28\x57\xcf\x6c\xcc\x32\x8d\x9f\x66\x01\x99\xc6\xb7\x6d\x0b\x63\x0c\xd7\xed\xb2\xca\xb1\x2f\x61\x49\x69\x2a\x4c\x0c\x25\x56\x90\x5e\x95\x6b\xb6\x18\x80\x84\xb9\x77\x22\x6b\xa3\xf1\x4f\xfd\x38\x9c\xdb\xd9\xec\xcb\x30\x96\x7d\xbb\xeb\xb1\x05\x37\x05\x1e\x17\x3d\x63\xf6\x69\x00\xe8\x29\xbb\xbe\x92\xeb\xa0\xbe\x6d\x00\x6d\x9e\x75\xe2\x47\x8e\x47\xe2\x67\x72\xad\xef\xec\xc8\x3c\x70\xeb\xe5\x3d\xe7\x84\xc7\x01\xf5\xc2\xfb\xdd\x57\x87\xed\x72\x82\x8f\x0c\xf2\x86\xec\x4a\x99\x65\xe4\x41\x7c\x16\x29\xb6\x90\x39\x99\x60\xfa\xb2\x29\xed\xbe\x10\xed\x41\x14\xfa\xe4\xb4\x03\x90\x91\x1d\x0b\x80\x32\x3c\x34\x09\x79\x41\x93\xa7\x73\xb4\x1d\x8d\x03\xfd\xa0\xd2\xe8\x8f\x87\x82\xe9\x0b\xcc\xe2\x3f\x39\x3a\x6e\x0e\x99\xed\x6e\xd1\x49\x20\x8a\x18\x47\x87\x0c\xc1\x6c\x5d\xb7\x31\xb7\xec\x1a\x62\x50\xbe\x19\xa7\x68\x18\xe3\x1e\xab\x2d\x0e\x29\x68\x51\xd1\x18\x0b\x0c\x87\xed\x1e\x25\x99\xd8\xc1\x1c\x79\x83\x68\xda\x2f\x52\xd3\xe4\x75\xcb\x22\xab\x14\x29\x7f\x59\xa6\x66\x95\xac\x32\x7e\xe2\xf1\xd6\x7b\xcc\xfd\xd4\x32\xa7\x8c\x43\x99\x5b\xbc\xbf\xff\x34\x62\x72\x4e\xa4\x87\xe6\xaf\xa5\x21\x8b\xe0\xe5\xd1\x5a\xb2\x7d\x26\x17\x42\x3b\xec\x61\x90\x63\xee\xfc\x0f\x13\xc8\x40\x37\xe8\x32\xc8\xf9\x61\x3a\xbc\x18\xb4\xf8\xbe\xe2\x7b\x26\xb0\xb9\xf1\xcd\xcf\x4b\x85\xcd\xe7\x8f\xb9\xe5\xff\x51\x92\xfb\xda\x50\x26\x68\xe4\x3b\x8a\x31\xd3\xb4\xf5\xaf\x6d\x9d\xfa\x12\x9b\xb0\x4b\xe4\xdb\x71\x72\xaf\x93\x5f\x5f\x8c\xcb\x19\xf4\xd4\x6b\xec\x61\x82\xdf\x41\x26\x9c\xdb\x90\x8d\x23\xc6\x87\x82\xa6\x16\x44\x73\x61\x9b\x73\x5c\x87\x8e\xda\x7f\x0c\x3c\x79\xf7\xfd\xcd\x8b\x21\xc3\x26\x41\x8b\x80\x42\x26\x85\x26\x35\xcf\x19\x2b\xa9\x39\x3a\x10\x5e\xaf\x2f\xa0\xb9\x9f\x03\x33\x85\x31\xac\x95\x00\xe7\x92\x5a\x93\x32\x8e\x51\xc4\xe5\x8c\x6c\x29\x5f\x26\xc5\x44\xf8\x59\x3d\x80\xd4\xe4\x72\x8b\x70\xbe\x42\xcc\xfc\xfc\xa8\x18\x7c\x9a\xaa\x71\xda\x3f\xe2\x98\x2c\x46\x17\x95\xb6\xee\xb5\xbb\x31\x55\x8d\x51\x72\x32\x34\x8b\x0c\x38\xdf\x7a\x15\xcb\xfe\x99\xdb\xe2\x1a\xd3\xbd\xff\x0f\x90\x76\xf1\xbd\xae\xf6\x9f\xf3\x1f\x45\xf7\xf2\xfe\x34\x54\xe1\x12\x25\xc9\x66\xd5\xec\xbd\x67\x26\x7f\x2f\xdb\x23\xf7\x91\x15\x59\x66\x49\x63\xf3\xf2\xe9\xc7\x00\xd7\xf3\x87\x46\x59\xfd\xc1\xbf\x01\x00\x00\xff\xff\x58\xf5\x69\x16\xfc\x13\x00\x00")

func dataOptionsNixBytes() ([]byte, error) {
	return bindataRead(
		_dataOptionsNix,
		"data/options.nix",
	)
}

func dataOptionsNix() (*asset, error) {
	bytes, err := dataOptionsNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/options.nix", size: 5116, mode: os.FileMode(420), modTime: time.Unix(1523615141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/eval-machines.nix": dataEvalMachinesNix,
	"data/options.nix": dataOptionsNix,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"eval-machines.nix": &bintree{dataEvalMachinesNix, map[string]*bintree{}},
		"options.nix": &bintree{dataOptionsNix, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

