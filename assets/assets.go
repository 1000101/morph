// Code generated by go-bindata.
// sources:
// data/eval-machines.nix
// data/options.nix
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataEvalMachinesNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4b\x6f\xdb\x38\x10\xbe\xeb\x57\x0c\xd4\x00\xb6\x90\x46\xe9\xee\x6d\x6d\xf8\xd0\x2d\xf6\x05\xf4\x11\xb4\x45\x2f\x41\xb0\xa0\xa5\x91\x45\x98\x22\x55\x92\x72\xe2\x35\xfc\xdf\x17\xc3\x87\x28\xb9\x39\x34\x3e\x24\xd2\x88\x1c\xce\x7c\xf3\xf1\x9b\x79\x05\xef\x54\xd7\x0b\xb4\x28\x8e\x60\xac\xe6\x7d\x8f\x35\xd4\xea\x51\xc2\x01\xb5\xe1\x4a\x82\x6a\x40\xf2\x27\xd5\x9b\x05\xe0\x81\x89\x81\x59\xa5\xb3\x13\x48\xb4\x8f\x4a\xef\xff\x78\xea\x35\x9c\x57\x59\x26\xd0\x66\x10\xad\xb0\x01\xde\xf5\x4a\xdb\xe9\xb2\x75\x06\xd0\xef\x77\x06\x00\x60\x13\x3f\x94\xf1\x3f\x7d\xa1\x15\x82\x6f\xc1\xaf\x20\x4b\x29\xf8\x76\x9d\x71\x99\x01\x3c\x72\xdb\x42\x5c\xe5\x5e\xdc\xb7\x4c\x63\x05\xa7\x0c\xc0\xa7\x32\x58\x04\xdb\x22\xd4\xd8\x70\xc9\x2d\x57\xd2\x50\x06\x64\xea\x58\xd5\x72\x89\xa6\xa4\x38\x55\x8d\x06\x36\x19\x9d\x24\xb8\xb1\x5f\xd5\x5b\x6b\xb5\x81\x65\xc7\x7a\xfa\xe3\x56\x7e\x64\x1d\xae\xdc\x12\x00\x9f\x9e\xff\xbd\x82\xbf\xd0\x3a\x97\x95\x92\x0d\xdf\x0d\x9a\xd9\x80\x94\x6d\xb9\x89\x07\x41\xa3\x55\x07\xc8\xaa\x36\x26\x3b\xf1\x80\x4f\xbd\x46\x43\x00\xbf\x06\x66\xad\xdb\xb1\x83\x7f\x1b\x2e\x90\xde\x35\xdf\x0e\x16\x0d\x18\xe5\xce\xf9\xc8\x9f\x3e\x7d\x81\x4e\xd5\x83\xc0\x89\x13\x73\x34\x16\x3b\xa8\x98\x84\x1d\x3f\x20\x18\x94\x86\x6f\x05\x02\x6a\xad\x34\x74\x68\x0c\xdb\xf9\x84\xfd\xcf\x7b\x30\xb0\x81\x7b\x38\x85\x12\xf9\xb7\x58\x86\xab\xd3\x24\xf9\x33\x3c\xac\xe1\x4c\x2b\x65\x8b\x9a\x5b\x58\x86\x65\x85\x8f\x94\x3e\x3e\xac\x83\x77\x57\x24\xfa\x9d\x40\xb2\x0e\x61\x03\x13\x4f\xeb\x31\x04\xa2\x10\x26\x7e\xe4\x57\x27\xab\xbe\x58\x4d\xd9\xbb\x82\xf7\xcc\xb6\xe7\x5b\x62\x9c\xb9\x15\x7c\x7b\x4b\x9c\xbb\xf1\x38\x97\x92\x3f\xe5\xae\xd6\xf1\x17\xe3\x8a\xb4\xf8\x21\xcf\x89\x2d\x59\xaf\xaf\x67\x66\x82\x62\x8f\x47\xd8\x40\x5e\x63\x2f\xd4\xf1\xc6\xd8\xa1\x69\xf2\xf5\x6c\x95\x3b\x6e\x02\x58\x79\xab\x7a\x47\x2f\x8a\x2a\xa1\x90\x7e\xaf\xe0\x4e\xab\x03\xaf\x11\x18\xb1\x91\x0d\xc2\x42\xab\x8c\x75\xe0\x30\x59\x83\x3f\xac\x43\x69\xc1\x32\xbd\x43\x0b\xf8\x7d\x60\xe2\x19\x47\xd6\xb3\x60\xe4\x85\x07\x78\x4e\x6b\xe0\xd2\xbf\xaa\x1a\x45\xf9\x83\x93\x50\x38\x2e\x77\x25\x05\xf1\x31\x54\x68\xff\xe9\x80\x5a\x53\x90\xbf\xbd\x79\xf3\x7c\xc1\xe2\x2f\x85\x5b\xfa\x70\xff\x56\xc6\xbe\xc8\xc7\x79\xf6\x3e\x83\x0c\x9f\xac\x66\x6f\xf5\x8e\xb0\x4d\x74\xf3\xb7\x74\xfd\x1c\x9f\xe0\x9c\xb6\x8f\x8f\xfe\x80\x02\x96\x84\x14\x2d\x33\xb0\xd4\xd8\xa9\x03\xfa\xdb\x1d\xd5\xe9\x1e\xf2\xf0\x98\x53\xcd\x5d\x6d\x4c\x0e\xb9\x46\xa3\x06\x5d\xa1\x7f\xfe\x3e\x70\x8d\x39\xe4\x8e\xea\x39\x3c\x14\x45\xb1\xce\xb2\x6c\x8a\xc4\x3f\xb2\x51\x1f\x1c\xab\x28\xee\x6c\x0e\xd3\x68\x82\x98\x40\xfa\x36\x85\x87\xe9\xdd\x40\x36\xca\x9d\xe9\x44\xe4\x88\xc2\x30\xf0\xda\xdb\x5c\xa2\xe7\x75\xe6\xd4\xee\xae\x65\x06\xe1\x97\x55\x54\x65\x04\x25\xc5\x31\x88\xdf\x18\x43\xd2\x12\xe2\x04\x97\x8d\x8a\xaa\x37\x0a\x5a\x80\x62\x91\x44\x39\x46\xe0\xf0\x77\x76\x7a\xf0\x56\x2e\xc1\x2b\xae\x7b\x8b\x9a\x3a\xde\xb4\x46\xf0\x1e\x3a\xd6\x07\xc0\x5d\x01\x97\x72\x05\x87\xc5\x8a\x8e\x84\x03\x6c\xc0\x54\x7a\xd8\x7e\x72\xb7\xe7\x9b\x53\x83\xc3\x62\x9d\xe4\x03\xa6\x7a\x73\x28\xc3\xd5\x4f\x29\x15\x30\xa1\x9f\xc1\x4a\xa3\x35\xd0\x22\x13\xb6\x7d\xd7\x62\xb5\x9f\x09\x41\x00\x5e\xce\x6c\xa4\x2d\x9f\x51\x20\xe1\xb7\x81\xf1\x08\xaf\xa6\xe5\xec\xb3\xd2\x91\x41\x5f\x86\xa6\xe1\x4f\xcf\xaf\xfe\xe6\x5b\xe5\x4f\x2c\x29\x26\xac\x0d\x4f\xc5\x7a\x06\xe5\x7b\xee\x6e\x95\x6f\x44\x7b\x3c\xae\x60\x87\x96\xd0\x74\x1a\x15\xf1\x9e\x71\x7c\x34\x06\xef\xa9\x09\xc7\xd2\xc6\x2e\x4b\xf9\x9c\x9e\x61\xd1\xaf\x2b\xd8\x0e\x5c\xd4\x50\x85\x69\x60\x54\x95\x59\x87\x73\x1c\x4a\x25\x0f\x4a\x6f\xa8\xff\x07\x4a\x25\xca\x34\x5c\x58\xd4\xa1\xab\x12\x01\x56\x80\x02\x3b\x90\x7e\x4f\x11\x38\x15\xeb\xae\x07\xf9\x4e\x75\x1d\xe9\x62\xde\x29\xdd\xb7\xf9\xd8\x4d\x7a\x8d\x0d\xea\xf7\xaa\x62\xe2\x77\x17\xe4\x06\xac\x1e\x48\x02\xc2\x92\xc5\x22\x35\xb8\x7d\xcd\x35\xdc\xf4\x70\xa5\x86\xd4\xb0\x27\x3d\xc6\xc1\xe6\x58\xe7\x9b\xfd\x2c\xc0\x89\x23\x00\x21\xe1\xc6\xc0\xd5\xe9\xb2\x9c\x0e\xa8\xd2\xaa\x5e\xe0\x01\xc5\xd9\x9d\x74\x7b\x75\x92\xe7\x17\xef\x2d\x6b\x7d\xb8\xa3\x76\x97\x7c\x90\x69\xf4\xb3\x58\x04\x94\x16\x45\x91\x72\x0d\x85\xfb\x73\x90\x95\x9b\x3a\x24\x62\x8d\x35\xf5\x88\x8a\x89\x6a\x10\x2c\x4c\x40\x7e\x68\x4b\xea\x52\xc2\x57\x1a\x4e\x4c\xab\x06\x51\x83\x63\x03\x1e\x50\xc2\x63\x8b\x32\xad\x72\xbe\x99\x46\x90\x8a\x6e\x97\x85\x23\xda\xd7\x34\x86\x3c\x22\x34\x6c\x8f\x13\xb5\xb2\x0a\xb6\x08\x8c\xe6\x0d\xab\x92\x0a\xd1\xd9\x41\x3c\x27\x1d\x4b\x35\xce\xf3\x24\xb0\x48\xc9\x34\x09\x99\xd2\xa9\xeb\xd0\x75\xc7\xd0\x0a\x1a\xcf\x4b\xcb\x25\x4d\x82\x97\x63\x1a\x5b\xd1\x08\x58\x12\x9f\x5c\x45\xef\x18\xd7\xc0\xa0\x61\xc2\x60\x01\xcb\x71\xe7\xa4\x1b\x8c\xb6\x26\xc0\xe7\x0e\x6a\xbc\xb4\x03\x5d\x35\x1a\xb5\x7a\x43\xf3\x2a\x05\x20\xfc\x11\x83\xe4\xdf\x07\x84\x25\x3d\x37\x82\x59\x8b\xd2\xc7\xb0\x43\xfb\xd9\xe7\x6a\x40\x24\x27\xa3\x8d\x52\xb8\x94\x5b\x97\xbe\x9b\x9b\xc7\x29\xa8\x89\xb2\xa0\xc7\x8d\x23\x0b\x78\x93\x30\xe0\x26\x95\x3d\xb9\xb1\x2d\xca\x09\xf9\x96\xcb\xc9\xb7\x65\x82\x33\x59\x8b\xa2\x8c\x15\x52\x1a\xee\x1f\x8a\x71\x37\x0a\x83\x53\x57\x69\xcf\xc5\x8e\xd8\x0c\xc2\xe2\x7b\x68\xe0\x01\xae\xaf\xe1\x12\x94\x98\x90\x43\x86\x1a\xe9\x57\x35\xd6\xf6\xe7\x81\x19\xcf\x79\x21\x18\x91\x26\x27\x9a\x33\xd9\x39\x87\x4d\xda\x3e\x4a\x42\x43\x63\xec\x8b\xf8\x32\x45\x32\x4b\xc0\xc1\xfd\xc3\x9c\x45\x31\x53\xe3\x59\xf4\x1f\x8f\x72\x73\xc9\xa9\x4a\xc9\x8a\xd9\x0f\xac\x9f\x42\xb4\xbc\x60\x63\x63\x1c\x4d\xcf\xd9\xff\x01\x00\x00\xff\xff\x8b\xe5\xb9\x5b\xb5\x0d\x00\x00")

func dataEvalMachinesNixBytes() ([]byte, error) {
	return bindataRead(
		_dataEvalMachinesNix,
		"data/eval-machines.nix",
	)
}

func dataEvalMachinesNix() (*asset, error) {
	bytes, err := dataEvalMachinesNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/eval-machines.nix", size: 3509, mode: os.FileMode(420), modTime: time.Unix(1523006081, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOptionsNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xc1\x8e\xa3\x46\x10\xbd\xf3\x15\x25\x72\x98\x5d\x69\x44\x46\x51\x72\x09\x9a\x43\x94\x43\x26\xd2\x68\xbd\xca\x38\xa7\x28\x87\x06\xca\x74\xcb\x4d\x17\xe9\x2a\x82\x2d\xcb\xff\x1e\x35\x66\x6c\xc0\x78\x49\xe2\xe5\x82\xdd\x4d\xbf\x7a\xfd\xea\x55\xd5\x01\x72\x72\x1b\x53\x3e\x82\x35\xd9\x23\xd4\xdb\x92\x1f\x21\x49\x12\x38\xfe\x18\x45\xad\x11\x1d\xd6\xd3\x28\xb2\x28\x51\x44\xad\x43\xbf\xaa\xc5\x90\xe3\xf5\xbe\x46\x78\x06\xd9\xd7\xc8\x09\x37\x59\x45\x45\x63\xf1\xc3\xa1\x3f\x0c\x87\x08\x00\x80\x4e\x1f\xc3\x73\xff\x3f\x3c\xa5\xa7\xa6\x86\x67\xa8\xb6\x27\xa8\xc1\x56\x78\x64\x04\x2c\x3e\x1d\xed\x16\xc8\xb9\x37\xa7\x73\xcf\x10\xff\xd2\x61\x89\x56\x02\xad\xb1\x16\xa8\x75\x20\x1a\x81\x31\xf7\x28\x49\x3c\x3d\xbc\x51\x8d\x95\x70\xd0\x13\xc9\x60\xf7\x98\x46\xe7\xdf\x0d\xa3\xff\x4a\xf4\x7e\x0f\x50\xad\xa6\xbb\xc9\xf5\xaf\xe3\xc7\x34\x8a\xb6\xb8\xff\x62\x0e\x60\x9c\x84\x69\x0a\x0a\x64\x31\x4e\xf5\x14\xaf\x6e\x79\xeb\x7e\x93\x9b\xfd\x86\x15\x09\x42\xad\x44\xc7\x67\x7a\xdd\x9b\xa9\xf1\x39\xde\x01\xfd\x4a\xb9\xb2\x73\xc8\x9d\xfd\xe6\x80\x2f\xd2\x1d\x8e\xe9\x38\xd8\xd4\xb2\xf3\x31\x1f\x1e\xce\x62\xaf\xba\x20\xb4\x19\x66\xaa\xdf\x7c\x78\x18\xf3\xa9\xd1\x57\x86\xb9\x57\xf7\x0b\xac\xe2\xa7\xef\x9f\x9e\xe2\xf4\xbf\xc9\xf0\x79\x80\x8e\xbb\xda\x23\x33\x16\xa0\x18\x28\x17\x65\x93\x8b\x36\x17\x67\x68\x54\x56\xf4\xcf\x1a\xf3\xed\xff\xb5\xc6\x80\xc1\x4c\x01\xdc\x36\xff\x84\xfc\x4b\xc7\x04\xf2\x40\x65\xb8\x37\x64\x0d\xa0\x89\x65\xd1\x28\xae\xb1\x76\xe5\x17\xe5\x7a\x09\x58\x4e\x55\x18\xa7\x57\xfa\x07\x88\xf7\xd5\x6f\x2e\xcb\xa7\xce\x97\x38\x94\x96\xfc\xd6\xb8\x32\x09\x84\x3e\xa9\x0a\x47\x2c\x39\xd7\x58\xdd\x63\xe8\xb7\x0e\x60\x86\x57\xac\x45\xea\xb1\x24\x35\xf9\x65\x49\x8c\x93\x5b\xa6\x09\xc7\x5d\x53\x65\xe8\x27\xb8\x4a\xf4\x22\x6e\xf8\xe8\x96\xbc\xeb\xf5\x67\xf0\xf8\x57\x83\x2c\xc3\xda\x1c\x5d\xe7\xdb\x49\x7a\x51\x15\xe8\x67\x6b\x63\x14\x56\x89\x78\x5e\x6d\x16\x75\x74\x24\x60\xaa\xda\x62\x85\x4e\xb0\x98\x61\x70\x38\x8e\x2f\x8d\xde\x50\x71\x87\x9c\x6f\x98\x93\x2b\x18\x32\x94\x16\xd1\x9d\xfc\xcc\x33\x81\xbf\x1b\xc5\x15\x53\x21\x35\xf7\xe4\x71\xdd\x23\x18\x17\x7a\x50\xe0\x30\x13\xf4\x87\x51\x50\xe3\x18\xf3\xc6\xe3\xdb\xdb\xeb\x62\xe0\x8c\xc8\xde\x88\xfc\x6b\xe9\xc8\x23\x04\x14\xf4\x9e\xfc\x5c\xe0\x8d\xb2\x8c\x33\xfd\xc7\xb8\x28\x1a\xf4\x95\xa4\xc0\xda\xd2\x3e\x64\xeb\xdc\x62\x44\xf9\x12\xe5\xe5\xdf\x14\xfe\xd9\x08\xef\x75\xd8\x35\xe3\x85\x56\x7b\x19\x00\xb8\x53\xc1\x2b\x61\x0d\x6a\xc5\xdc\x92\x2f\x12\xc1\x5d\xe7\xd4\x0d\x51\xa6\x7c\x9c\xc2\x74\x5e\x8c\x1d\x39\x1e\xb5\x8b\xb3\xe3\xa7\x70\x0c\x05\x5a\x8d\x1e\x01\x55\xae\x21\x20\x99\xac\x11\xec\x4f\x65\xc8\xa0\x02\x2e\x08\x41\x86\x90\x53\x6d\xb0\x80\xbf\x8d\x02\x66\x7d\x46\x32\x8e\x05\x55\x71\x9a\x43\x9e\x9a\x52\x77\xf3\xe8\x93\xd9\x41\x6e\x89\x1b\x8f\xf0\x61\x8b\x58\x1b\x57\x82\x11\x08\x56\xe9\x47\x56\xf8\x84\x85\x3c\x26\x1f\xaf\xc7\x56\x5f\x95\xef\x43\x62\xb9\x34\xad\x61\x59\x6d\x60\x32\x58\xae\x1d\xf1\xc7\x9f\x8b\xe2\xbc\x1a\xee\x48\xea\xc1\x68\xe0\x99\xd1\x7a\xb2\x53\xf4\x4f\x00\x00\x00\xff\xff\x08\x8d\xc4\xa1\x99\x0a\x00\x00")

func dataOptionsNixBytes() ([]byte, error) {
	return bindataRead(
		_dataOptionsNix,
		"data/options.nix",
	)
}

func dataOptionsNix() (*asset, error) {
	bytes, err := dataOptionsNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/options.nix", size: 2713, mode: os.FileMode(420), modTime: time.Unix(1523010921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/eval-machines.nix": dataEvalMachinesNix,
	"data/options.nix": dataOptionsNix,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"eval-machines.nix": &bintree{dataEvalMachinesNix, map[string]*bintree{}},
		"options.nix": &bintree{dataOptionsNix, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

