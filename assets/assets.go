// Code generated by go-bindata.
// sources:
// data/eval-machines.nix
// data/options.nix
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataEvalMachinesNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4b\x6f\xdb\x38\x10\xbe\xeb\x57\x0c\xd4\x00\xb6\x90\x46\xe9\xee\x6d\x6d\xf8\xd0\x2d\xf6\x05\xf4\x11\xb4\x45\x2f\x41\xb0\xa0\xa5\x91\x45\x98\x22\x55\x92\x52\xe2\x35\xfc\xdf\x17\xc3\x87\x28\xbb\x39\x34\x3e\x24\xd2\x88\x1c\xce\x7c\xf3\xf1\x9b\x79\x05\xef\x54\xd7\x0b\xb4\x28\x0e\x60\xac\xe6\x7d\x8f\x35\xd4\xea\x51\xc2\x88\xda\x70\x25\x41\x35\x20\xf9\x93\xea\xcd\x02\x70\x64\x62\x60\x56\xe9\xec\x08\x12\xed\xa3\xd2\xfb\x3f\x9e\x7a\x0d\xa7\x55\x96\x09\xb4\x19\x44\x2b\x6c\x80\x77\xbd\xd2\x76\xbe\x6c\x9d\x01\xf4\xfb\x9d\x01\x00\xd8\xc4\x0f\x65\xfc\x4f\x5f\x68\x85\xe0\x5b\xf0\x2b\xc8\x52\x0a\xbe\x5d\x67\x5c\x66\x00\x8f\xdc\xb6\x10\x57\xb9\x17\xf7\x2d\xd3\x58\xc1\x31\x03\xf0\xa9\x0c\x16\xc1\xb6\x08\x35\x36\x5c\x72\xcb\x95\x34\x94\x01\x99\x3a\x56\xb5\x5c\xa2\x29\x29\x4e\x55\xa3\x81\x4d\x46\x27\x09\x6e\xec\x57\xf5\xd6\x5a\x6d\x60\xd9\xb1\x9e\xfe\xb8\x95\x1f\x59\x87\x2b\xb7\x04\xc0\xa7\xe7\x7f\xaf\xe0\x2f\xb4\xce\x65\xa5\x64\xc3\x77\x83\x66\x36\x20\x65\x5b\x6e\xe2\x41\xd0\x68\xd5\x01\xb2\xaa\x8d\xc9\xce\x3c\xe0\x53\xaf\xd1\x10\xc0\xaf\x81\x59\xeb\x76\xec\xe0\xdf\x86\x0b\xa4\x77\xcd\xb7\x83\x45\x03\x46\xb9\x73\x3e\xf2\xa7\x4f\x5f\xa0\x53\xf5\x20\x70\xe6\xc4\x1c\x8c\xc5\x0e\x2a\x26\x61\xc7\x47\x04\x83\xd2\xf0\xad\x40\x40\xad\x95\x86\x0e\x8d\x61\x3b\x9f\xb0\xff\x79\x0f\x06\x36\x70\x0f\xc7\x50\x22\xff\x16\xcb\x70\x75\x9c\x25\x7f\x82\x87\x35\x9c\x68\xa5\x6c\x51\x73\x0b\xcb\xb0\xac\xf0\x91\xd2\xc7\x87\x75\xf0\xee\x8a\x44\xbf\x23\x48\xd6\x21\x6c\x60\xe6\x69\x3d\x85\x40\x14\xc2\xc4\x8f\xfc\xea\x68\xd5\x17\xab\x29\x7b\x57\xf0\x9e\xd9\xf6\x74\x4b\x8c\x33\xb7\x82\x6f\x6f\x89\x73\x37\x1e\xe7\x52\xf2\xa7\xdc\xd5\x3a\xfe\x62\x5c\x91\x16\x3f\xe4\x39\xb3\x25\xeb\xf5\xf5\x99\x99\xa0\xd8\xe3\x01\x36\x90\xd7\xd8\x0b\x75\xb8\x31\x76\x68\x9a\x7c\x7d\xb6\xca\x1d\x37\x03\xac\xbc\x55\xbd\xa3\x17\x45\x95\x50\x48\xbf\x57\x70\xa7\xd5\xc8\x6b\x04\x46\x6c\x64\x83\xb0\xd0\x2a\x63\x1d\x38\x4c\xd6\xe0\x0f\xeb\x50\x5a\xb0\x4c\xef\xd0\x02\x7e\x1f\x98\x78\xc6\x91\xf5\x2c\x98\x78\xe1\x01\x3e\xa7\x35\x70\xe9\x5f\x55\x8d\xa2\xfc\xc1\x49\x28\x1c\x97\xbb\x92\x82\xf8\x18\x2a\xb4\xff\x34\xa2\xd6\x14\xe4\x6f\x6f\xde\x3c\x5f\xb0\xf8\x4b\xe1\x96\x3e\xdc\xbf\x95\xb1\x2f\xf2\x71\x3a\x7b\x3f\x83\x0c\x9f\xac\x66\x6f\xf5\x8e\xb0\x4d\x74\xf3\xb7\x74\xfd\x1c\x9f\xe0\x94\xb6\x4f\x8f\xfe\x80\x02\x96\x84\x14\x2d\x33\xb0\xd4\xd8\xa9\x11\xfd\xed\x8e\xea\x74\x0f\x79\x78\xcc\xa9\xe6\xae\x36\x26\x87\x5c\xa3\x51\x83\xae\xd0\x3f\x7f\x1f\xb8\xc6\x1c\x72\x47\xf5\x1c\x1e\x8a\xa2\x58\x67\x59\x36\x47\xe2\x1f\xd9\xa8\x0f\x8e\x55\x14\x77\x76\x0e\xd3\x64\x82\x98\x40\xfa\x36\x87\x87\xe9\xdd\x40\x36\xca\x9d\xe9\x44\xe4\x88\xc2\x30\xf0\xda\xdb\x5c\xa2\xa7\x75\xe6\xd4\xee\xae\x65\x06\xe1\x97\x55\x54\x65\x04\x25\xc5\x21\x88\xdf\x14\x43\xd2\x12\xe2\x04\x97\x8d\x8a\xaa\x37\x09\x5a\x80\x62\x91\x44\x39\x46\xe0\xf0\x77\x76\x7a\xf0\x56\x2e\xc1\x2b\xae\x7b\x8b\x9a\x3a\xdd\xb4\x46\xf0\x1e\x3a\xd6\x07\xc0\x5d\x01\x97\x72\x05\xe3\x62\x45\x47\xc2\x08\x1b\x30\x95\x1e\xb6\x9f\xdc\xed\xf9\xe6\xd4\x60\x5c\xac\x93\x7c\xc0\x5c\x6f\xc6\x32\x5c\xfd\x94\x52\x01\x33\xfa\x19\xac\x34\x5a\x03\x2d\x32\x61\xdb\x77\x2d\x56\x7b\x03\x23\xd5\x73\xce\xae\x00\xbf\x3c\xb3\x91\xc2\x7c\x46\x81\x84\xe2\x06\xa6\x83\xbc\xa6\x96\x67\x9f\x95\x8e\x3c\xfa\x32\x34\x0d\x7f\x7a\x7e\xf5\x37\xdf\x30\x7f\x62\x49\x31\xe3\x6e\x78\x2a\xd6\x67\x80\xbe\xe7\xee\x6e\xf9\x76\xb4\xc7\xc3\x0a\x76\x68\x09\x53\xa7\x54\x11\xf5\x33\xa6\x4f\xc6\xe0\x3d\xb5\xe2\x58\xe0\xd8\x6b\x29\x9f\xe3\x33\x5c\xfa\x75\x05\xdb\x81\x8b\x1a\xaa\x30\x13\x4c\xda\x72\xd6\xe7\x1c\x93\x52\xe1\x83\xde\x1b\x9a\x02\x02\xb1\x12\x71\x1a\x2e\x2c\xea\xd0\x5b\x89\x06\x2b\x40\x81\x1d\x48\xbf\xa7\x08\xcc\x8a\xd5\xd7\x83\x7c\xa7\xba\x8e\xd4\x31\xef\x94\xee\xdb\x7c\xea\x29\xbd\xc6\x06\xf5\x7b\x55\x31\xf1\xbb\x0b\x72\x03\x56\x0f\x24\x04\x61\xc9\x62\x91\xda\xdc\xbe\xe6\x1a\x6e\x7a\xb8\x52\x43\x6a\xdb\xb3\x4e\xe3\x60\x73\xdc\xf3\x2d\xff\x2c\xc0\x99\x23\x00\x21\xe1\xc6\xc0\xd5\xf1\xb2\x9c\x0e\xa8\xd2\xaa\x5e\xe0\x88\xe2\xe4\x4e\xba\xbd\x3a\xca\xd3\x8b\xf7\x96\xb5\x1e\xef\xa8\xe9\x25\x1f\x64\x9a\xfc\x2c\x16\x01\xa5\x45\x51\xa4\x5c\x43\xe1\xfe\x1c\x64\xe5\x66\x0f\x89\x58\x63\x4d\x9d\xa2\x62\xa2\x1a\x04\x0b\x73\x90\x1f\xdd\x92\xc6\x94\xf0\x95\x46\x14\xd3\xaa\x41\xd4\xe0\xd8\x80\x23\x4a\x78\x6c\x51\xa6\x55\xce\x37\xd3\x08\x52\xd1\x1d\xb3\x70\x40\xfb\x9a\x86\x91\x47\x84\x86\xed\x71\xa6\x59\x56\xc1\x16\x81\xd1\xd4\x61\x55\xd2\x22\x3a\x3b\x48\xe8\xac\x6f\xa9\xc6\x79\x9e\x05\x16\x29\x99\xe6\x21\x53\x3a\x8d\x1d\xba\xee\x10\x1a\x42\xe3\x79\x69\xb9\xa4\x79\xf0\x72\x58\x63\x2b\x1a\x04\x4b\xe2\x93\xab\xe8\x1d\xe3\x1a\x18\x34\x4c\x18\x2c\x60\x39\xed\x9c\xf5\x84\xc9\xd6\x04\xf8\xdc\x41\x8d\x17\x78\xa0\xab\x46\x03\x57\x6f\x68\x6a\xa5\x00\x84\x3f\x62\x90\xfc\xfb\x80\xb0\xa4\xe7\x46\x30\x6b\x51\xfa\x18\x76\x68\x3f\xfb\x5c\x0d\x88\xe4\x64\xb2\x51\x0a\x97\xa2\xeb\xd2\x77\xd3\xf3\x34\x0b\x35\x51\x16\xf4\xb4\x71\x62\x01\x6f\x12\x06\xdc\xa4\xb2\x27\x37\xb6\x45\x39\x23\xdf\x72\x39\xfb\xb6\x4c\x70\x26\x6b\x51\x94\xb1\x42\x4a\xc3\xfd\x43\x31\xed\x46\x61\x70\xee\x2a\xed\xb9\xd8\x11\x5b\x42\x58\x7c\x0f\x0d\x3c\xc0\xf5\x35\x5c\x82\x12\x13\x72\xc8\x50\x3b\xfd\xaa\xa6\xda\xfe\x3c\x30\xd3\x39\x2f\x04\x23\xd2\xe4\x48\xd3\x26\x3b\xe5\xb0\x49\xdb\x27\x49\x68\x68\x98\x7d\x11\x5f\xe6\x48\x66\x09\x38\xb8\x7f\x38\x67\x51\xcc\xd4\x78\x16\xfd\xc7\xa3\xdc\x5c\x72\xaa\x52\xb2\x62\xf6\x03\xeb\xe7\x10\x2d\x2f\xd8\xd8\x18\x47\xd3\x53\xf6\x7f\x00\x00\x00\xff\xff\xfa\xb3\xcc\x11\xbb\x0d\x00\x00")

func dataEvalMachinesNixBytes() ([]byte, error) {
	return bindataRead(
		_dataEvalMachinesNix,
		"data/eval-machines.nix",
	)
}

func dataEvalMachinesNix() (*asset, error) {
	bytes, err := dataEvalMachinesNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/eval-machines.nix", size: 3515, mode: os.FileMode(420), modTime: time.Unix(1523283164, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataOptionsNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x06\xda\x43\x12\x20\xd5\x3a\x4e\x8a\x16\x35\x72\x28\x52\xa0\x59\x20\xd8\x04\x1b\xb7\x97\xc5\x1e\x68\x6a\x6c\x11\xa6\x38\x2c\x39\x8a\x63\x18\x79\xf7\x82\xb2\x6c\x4b\x8a\xa4\xfc\x5d\x0a\xd4\x87\x48\xa1\x38\x33\xdf\xfc\xf0\xe3\xcc\x06\x24\x99\xb9\x5a\x9c\x82\x56\xb3\x53\xb0\xcb\x85\x3f\x85\x24\x49\xe0\xe9\xb7\x28\x5a\x29\xce\xc2\xfa\x64\xff\x96\xf0\xda\xa2\x9f\x44\x91\x46\x8e\x22\x5a\x19\x74\xb7\x96\x15\x19\x3f\x5d\x5b\x84\x4b\xf0\xc5\x2c\xa7\xb4\xd0\x08\xc7\x9b\x4a\x0f\x6c\x22\x00\x00\xda\xee\x83\xcb\xea\xff\xf0\x5b\x38\x2a\x2c\x5c\x42\xbe\xdc\x6a\xa9\x7d\x0a\x3f\xae\x74\xb2\x9b\x34\xd6\x53\xf4\xd2\xa9\xad\xc4\x25\xc4\x7f\x96\x5a\x38\x13\x0c\x2b\xa5\x35\xd0\xca\x00\x67\x08\x1e\xa5\x43\x4e\xe2\xb6\xf0\x5c\x14\x9a\x83\xa0\x23\xe2\xda\xd7\xa7\x49\xb4\x7f\x2f\x3c\xba\x0f\x03\xfb\x2b\x28\x59\x65\xf4\x61\x58\xd5\xe3\xe9\x64\x12\x45\x4b\x5c\xbf\x2e\xe4\xed\x80\xa7\xe8\x59\x19\x51\x81\x7b\xe6\xd9\x73\x9f\x5a\xde\x7c\xc3\x9c\x18\xc1\x0a\xce\xe2\x3d\xa4\xf2\xe9\xa9\x70\x12\xdf\xa5\xf4\x86\xa4\xd0\x5d\x3a\xcb\xda\xea\x52\x79\x08\xd4\xe6\x69\xd2\x34\xd3\xae\xc7\x6e\x9b\x47\x47\xfb\xd0\xde\x96\x46\x68\x5e\xcf\x4b\xf5\xf1\xe8\xa8\x89\xc7\xa2\xcb\x95\xf7\x55\x44\x07\x50\xc5\xa3\x8b\xd1\x28\x9e\xbc\x36\x00\x77\x35\xbd\xf8\x68\x1d\x7a\x8f\x29\x08\x0f\x24\x59\xe8\xe4\x10\x95\x43\x05\x3c\x04\x4b\xaf\xa9\x81\x56\x11\x94\x9a\x98\xf5\x6b\x13\xb5\xf7\xe8\xe2\x7c\x3c\x1a\xe5\xf1\x04\x3e\xc1\xf9\x08\x52\xb1\xf6\xdd\xbe\x4c\xa7\x37\x30\x27\x57\x45\x12\x98\x96\x68\x7c\xb9\xc2\x99\xf2\x90\x91\xe7\xa4\x95\x66\xa9\x52\xd7\x19\xd0\x0a\x90\x56\x9e\x6f\xe7\xdd\xb8\xbe\xff\xd8\xad\xe1\xa3\xc8\xad\x0e\xfb\xbf\xc7\x67\xbf\x8c\x93\xf1\x28\x39\x3b\x4b\xce\xc6\x9f\xcf\xc7\xf1\x8f\x9e\xc0\x7f\xb9\x7b\xb8\x80\xab\x2f\x7f\x7c\x83\x99\x26\xb9\xdc\xf2\x87\x14\x06\x34\x2d\x94\x81\xc2\x2b\xb3\x78\x8b\x27\x96\xb4\x92\x0a\xdf\xed\x4c\x5c\xbd\xc7\x9d\x5e\x2d\x7f\xf5\x31\xc4\x92\x0c\x3b\xd2\x3f\x59\x2d\x0c\xf6\x7a\xf6\x77\xa9\x52\x48\x89\xde\x1f\x60\x31\x81\xb0\x56\xaf\x87\xbc\x08\x7f\xcb\x12\xcb\x50\x68\xce\xae\x32\x94\xcb\x37\xb2\x8c\xcc\xd3\x97\x23\x20\xf3\xf4\xba\x69\x61\x28\xbb\x6d\xca\x50\x9e\xc3\x99\x95\x94\xe7\xc2\xa4\xb0\xc5\x0a\x32\xa8\xf2\xf5\xf3\x02\x90\x31\x77\x5e\x2f\x4d\x34\x61\xd7\xc7\xe1\x5c\x4f\xa7\x77\xfd\x58\x76\x67\xb7\xc3\x16\x5c\x96\x78\x7c\xf2\x06\x22\xaf\x01\xe8\xb8\xa2\xba\xae\xa7\x16\xea\xeb\x1a\xd0\xfa\xb7\x56\xfc\xc8\xf3\x40\xfc\x4c\xa1\xf5\xad\x1b\x20\xb7\xeb\x20\x6f\x44\x8e\xf1\xf3\x80\x06\xe1\xdd\xea\xa7\xc3\xf2\xb6\x1d\x49\x0c\xf2\x8a\xdc\x52\x99\x45\x12\x40\x7c\x15\x39\x36\x90\x79\x99\x61\xfe\xbe\x2b\xe7\xbe\x14\xed\x40\x14\x87\xe4\x34\x03\x60\xc9\x0d\x05\x40\x19\xee\xa3\xf5\x20\x68\x8a\x7c\x86\xae\xa5\x51\x70\x36\xa0\x31\x7c\xee\x0b\x66\x28\x30\x87\xff\x14\xe8\xb9\x7e\x63\x36\x5c\xf8\xdc\x4a\x20\x8a\x14\x07\x09\x56\x30\x3b\xdf\x26\xa5\x86\x5d\x43\x0c\x2a\x10\x51\x8e\x86\x31\xed\xb0\xba\x79\x6a\xba\x88\x4e\xd1\x10\x0b\xf4\x87\xed\x1e\x25\x99\xd4\xc3\x0c\x79\x85\x68\x9a\x07\xa9\x6e\x72\xdc\xb0\xc8\x2a\x47\x2a\xde\x97\xa9\x69\x25\xab\x4c\x60\xfb\x60\xbd\xc3\xdc\xcf\x0d\x73\xca\x78\x94\x85\xc3\xfb\xfb\x9b\x01\x93\x33\x22\xdd\x77\xf7\x2c\x0c\x39\x84\x20\x8f\xce\x91\xeb\x32\x39\x17\xda\x63\x07\x83\x3c\xe7\xce\xff\x30\x81\xf4\xdc\x06\x6d\x06\x39\x3e\xdc\x8c\x27\xbd\x16\xaf\x2a\xbe\x67\x02\x57\x98\xd0\x22\x05\xa9\xb8\xbe\xff\x39\xb7\xfc\x3f\x4a\x72\x57\x1b\xca\x44\xb5\x7c\x27\x29\x5a\x4d\xeb\x70\x6c\xf7\xa9\xdf\x62\x13\x6e\x81\x7c\x3d\x4c\xee\xfb\xe4\xef\xbb\xfc\xb2\x17\x7a\xa1\xfb\x3d\xf4\xe4\x87\xee\x65\x03\x56\x78\xbf\x22\x97\x26\x8c\x8f\x25\x4d\xcd\x89\x66\xc2\xc5\x13\x68\xb7\xf0\x3b\x3a\x6a\x4e\x39\x2f\x36\xf2\xbf\x07\x31\x64\x58\x65\xe8\x10\x50\xc8\xac\xd4\xa4\x66\x05\x63\x25\x35\x43\x0f\x22\xe8\x0d\x05\x34\x43\x90\x64\x15\xa6\xf0\xa0\x04\x78\x9f\xed\x35\x29\xe3\x19\x45\xba\x1d\x0a\x1c\x15\x8b\xac\x1c\x0e\xbe\xaa\x47\x90\x9a\x7c\xe1\x10\x8e\x97\x88\x36\x74\x87\x8a\x21\xa4\xa9\x9a\x1f\xc2\x16\xcf\xe4\x30\x39\xe9\x99\x21\x6a\x5d\xd5\x10\x25\x67\x7d\xbd\x48\x8f\xf3\x8d\xa3\xb8\xbd\x3f\x0b\x57\xce\x79\xed\x61\xa6\x87\xb4\xcb\xe7\x43\xb5\xfe\x96\x81\xab\x3d\x89\xbc\x0c\x55\xf8\x4c\x49\x72\x16\xb6\x4d\xea\x8e\x99\x42\x4f\xba\x43\x1e\x22\x2b\xac\x75\xa4\xb1\xde\x78\x87\x36\xc0\x77\x4c\x67\xdb\xea\x8f\xfe\x0d\x00\x00\xff\xff\xf5\x93\xa4\xe5\xc9\x10\x00\x00")

func dataOptionsNixBytes() ([]byte, error) {
	return bindataRead(
		_dataOptionsNix,
		"data/options.nix",
	)
}

func dataOptionsNix() (*asset, error) {
	bytes, err := dataOptionsNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/options.nix", size: 4297, mode: os.FileMode(420), modTime: time.Unix(1523283620, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/eval-machines.nix": dataEvalMachinesNix,
	"data/options.nix": dataOptionsNix,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"eval-machines.nix": &bintree{dataEvalMachinesNix, map[string]*bintree{}},
		"options.nix": &bintree{dataOptionsNix, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

